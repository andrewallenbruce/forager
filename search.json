[{"path":[]},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/forager/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/forager/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/forager/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2022). forager: Healthcare Revenue Cycle Analysis Suite. https://github.com/andrewallenbruce/forager, https://andrewallenbruce.github.io/forager/.","code":"@Manual{,   title = {forager: Healthcare Revenue Cycle Analysis Suite},   author = {Andrew Bruce},   year = {2022},   note = {https://github.com/andrewallenbruce/forager, https://andrewallenbruce.github.io/forager/}, }"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"forager-","dir":"","previous_headings":"","what":"Healthcare Revenue Cycle Analysis Suite","title":"Healthcare Revenue Cycle Analysis Suite","text":"Forager (noun) person goes place place searching things can eat use.1 Ager (noun) person calls place place searching payment insurance can refuse.2  forager work--progress, goal become suite integrated analytics tools focused comprehensive overview healthcare organization’s operational financial performance areas. Build rule-based, automated reporting pipeline monitor: Patient Scheduling Coding / Billing Productivity Collections & /R Denial Management","code":""},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Healthcare Revenue Cycle Analysis Suite","text":"can install development version forager GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewallenbruce/forager\")  # install.packages(\"remotes\") remotes::install_github(\"andrewallenbruce/forager\") library(forager)"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Healthcare Revenue Cycle Analysis Suite","text":"Calculate: Provider Lag: Days Date Service (dos) Date Release (dor) Billing Lag: Days Date Release (dor) Date Submission (dtos) Acceptance Lag: Days Date Submission (dtos) Date Acceptance (dtoa) Payment Lag: Days Date Acceptance (dtoa) Date Adjudication (dtad) Days AR: Days Date Release (dor) Date Adjudication (dtad)","code":"x <- forager::generate_data(15000) x |> head(n = 10) #> # A tibble: 10 × 5 #>    claim_id   payer        ins_class balance    dates            #>    <variable> <chr>        <chr>     <variable> <list>           #>  1 00001      Medicare     Primary   147.28843  <tibble [1 × 5]> #>  2 00002      Anthem       Secondary 334.23977  <tibble [1 × 5]> #>  3 00003      BCBS         Secondary 250.32610  <tibble [1 × 5]> #>  4 00004      Medicare     Primary   165.52817  <tibble [1 × 5]> #>  5 00005      Humana       Primary   188.52557  <tibble [1 × 5]> #>  6 00006      Medicare     Primary    38.95510  <tibble [1 × 5]> #>  7 00007      Medicaid     Primary    75.20807  <tibble [1 × 5]> #>  8 00008      Centene      Secondary  76.08480  <tibble [1 × 5]> #>  9 00009      UnitedHealth Primary    74.54573  <tibble [1 × 5]> #> 10 00010      Medicare     Secondary 193.73707  <tibble [1 × 5]> x |> tidyr::unnest(dates) |> head(n = 10) |> gluedown::md_table() #> |claim_id |payer        |ins_class |   balance|date_of_service |date_of_release |date_of_submission |date_of_acceptance |date_of_adjudication | #> |:--------|:------------|:---------|---------:|:---------------|:---------------|:------------------|:------------------|:--------------------| #> |00001    |Medicare     |Primary   | 147.28843|2020-09-18      |2020-09-20      |2020-09-21         |2020-09-24         |2020-10-25           | #> |00002    |Anthem       |Secondary | 334.23977|2020-05-18      |2020-06-01      |2020-06-05         |2020-06-10         |2020-07-11           | #> |00003    |BCBS         |Secondary | 250.32610|2020-10-18      |2020-10-30      |2020-11-03         |2020-11-04         |2020-12-07           | #> |00004    |Medicare     |Primary   | 165.52817|2020-04-18      |2020-04-27      |2020-04-29         |2020-05-01         |2020-06-01           | #> |00005    |Humana       |Primary   | 188.52557|2020-07-18      |2020-08-02      |2020-08-04         |2020-08-08         |2020-09-06           | #> |00006    |Medicare     |Primary   |  38.95510|2020-06-18      |2020-06-26      |2020-06-28         |2020-07-02         |2020-07-29           | #> |00007    |Medicaid     |Primary   |  75.20807|2020-12-18      |2020-12-28      |2020-12-31         |2021-01-03         |2021-02-02           | #> |00008    |Centene      |Secondary |  76.08480|2020-01-18      |2020-01-27      |2020-01-31         |2020-01-31         |2020-03-03           | #> |00009    |UnitedHealth |Primary   |  74.54573|2020-12-18      |2020-12-29      |2020-12-31         |2021-01-02         |2021-02-03           | #> |00010    |Medicare     |Secondary | 193.73707|2020-06-18      |2020-06-21      |2020-06-25         |2020-06-27         |2020-07-30           | x |> tidyr::unnest(dates) |>    count_days(date_of_service, date_of_release, provider_lag) |>    count_days(date_of_release, date_of_submission, billing_lag) |>    count_days(date_of_submission, date_of_acceptance, processing_lag) |>    count_days(date_of_submission, date_of_adjudication, payer_lag) |>    count_days(date_of_release, date_of_adjudication, days_in_ar) |>    dplyr::group_by(month = clock::date_month_factor(date_of_service)) |>    dplyr::summarise(        no_of_claims = dplyr::n(),        balance_total = sum(balance),        avg_prov_lag = round(mean(provider_lag), 2),                       avg_bill_lag = round(mean(billing_lag), 2),                       avg_accept_lag = round(mean(processing_lag), 2),                       avg_pay_lag = round(mean(payer_lag), 2),                       avg_dar = round(mean(days_in_ar), 2), .groups = \"drop\") |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"aging-calculation","dir":"","previous_headings":"","what":"Aging Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"x |>    tidyr::unnest(dates) |>    forager::count_days(date_of_release,                           date_of_adjudication,                           days_in_ar) |>    dplyr::group_by(payer,                    aging_bucket = cut(days_in_ar,                                       breaks = seq(0, 500, 30))) |>    dplyr::summarise(no_of_claims = dplyr::n(),                    balance_total = sum(balance), .groups = \"drop\") |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"days-in-ar-monthly-calculation","dir":"","previous_headings":"","what":"Days in AR Monthly Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"y <- tibble::tibble(   date = clock::date_build(2022, 1:12),   gct = abs(rnorm(12, c(365000.567, 169094.46, 297731.74), c(2:3))),   earb = abs(rnorm(12, c(182771.32, 169633.64, 179347.72), c(2:3))))  y |>    forager::dar_month(date, gct, earb, dart = 35) |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"days-in-ar-quarterly-calculation","dir":"","previous_headings":"","what":"Days in AR Quarterly Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"y |> forager::dar_qtr(date, gct, earb, 35) |>       gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"presentation-examples","dir":"","previous_headings":"Days in AR Quarterly Calculation","what":"Presentation Examples","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"gt_1 <- dar_month_2022 |>    dplyr::select(month, gct, earb, earb_trg, dar, pass) |>    headliner::add_headline_column(x = earb, y = earb_trg,    headline = \"{delta_p}% {trend} than Target\",    trend_phrases = headliner::trend_terms(more = \"HIGHER\", less = \"Lower\"), n_decimal = 0) |>    gt::gt(rowname_col = \"month\") |>    gt::cols_label(gct = \"Gross Charges\",                  earb = \"Ending AR\",                  earb_trg = \"Target AR\",                  dar = \"Days in AR\",                  pass = \"Pass\",                  headline = \"Ending AR Trend\") |>    gt::tab_row_group(label = \"Q4\", rows = c(10:12)) |>   gt::tab_row_group(label = \"Q3\", rows = c(7:9)) |>   gt::tab_row_group(label = \"Q2\", rows = c(4:6)) |>   gt::tab_row_group(label = \"Q1\", rows = c(1:3)) |>    gt::fmt_number(columns = dar) |>   gt::fmt_currency(columns = c(gct, earb, earb_trg)) |>   gt::tab_style(style = gt::cell_text(font = c(gt::google_font(name = \"IBM Plex Mono\"),   gt::default_fonts())), locations = gt::cells_body(columns = c(gct, earb, earb_trg, dar))) |>    gt::opt_stylize(style = 6, color = \"cyan\") |>    gt::tab_header(     title = gt::md(\"Example **Days in AR Analysis** with the **{forager}** Package\"),      subtitle = gt::md(\"**May** saw the *highest* Days in AR of 2022 *(51.2)*. This coincided with the largest <br> month-to-month increase in AR & highest percentage over the AR Target *(46%)*.\")) |>    gt::opt_all_caps() |>    gt::grand_summary_rows(     columns = c(gct, earb, earb_trg, dar),     fns = list(Mean = ~mean(., na.rm = TRUE), Median = ~median(., na.rm = TRUE))) |>    gt::opt_table_font(font = list(gt::google_font(name = \"Roboto\"))) |>    gt::opt_align_table_header(align = \"left\")  #gt_1 |> gt::gtsave(\"gt_1.png\", expand = 20) # Create df for gt_plt_bar_stack dar_month_2022_pct <- dar_month_2022 |>   dplyr::mutate(gct_pct = (gct / (gct + earb) * 100),          earb_pct = (earb / (gct + earb) * 100)) |>   dplyr::select(month, gct_pct, earb_pct) |>   tidyr::pivot_longer(-month, names_to = \"measure\", values_to = \"percentage\") |>   dplyr::group_by(month) |>   dplyr::summarize(list_data = list(percentage))  # Right join the two data frames dar_month_2022_join <- dplyr::right_join(dar_month_2022,                                           dar_month_2022_pct,                                           by = \"month\")  # Create new copy cols for gt_plt_bullet dar_month_2022_gt <- dar_month_2022_join |>    dplyr::select(month,                  gct,                  earb,                  earb_trg,                  dar,                  pass,                 list_data) |>   dplyr::mutate(target_col = earb,                  plot_col = earb_trg)  # Create gt table gt_2 <- dar_month_2022_gt |>    gt::gt(rowname_col = \"month\") |>   gt::cols_label(     #month = \"Month\",                  gct = \"Gross Charges\",                  earb = \"Ending AR\",                  earb_trg = \"Optimal AR\",                  dar = \"Days in AR\",                  pass = \"Pass\",                  plot_col = \"Optimal AR Threshold\") |>   gt::tab_row_group(label = \"Q4\", rows = c(10:12)) |>   gt::tab_row_group(label = \"Q3\", rows = c(7:9)) |>   gt::tab_row_group(label = \"Q2\", rows = c(4:6)) |>   gt::tab_row_group(label = \"Q1\", rows = c(1:3)) |>    #gt::tab_options(row_group.as_column = TRUE) |>    gtExtras::gt_theme_espn() |>    gt::fmt_number(columns = dar) |>   gt::fmt_currency(columns = c(gct, earb, earb_trg)) |>   #gtExtras::gt_plt_dot(dar, month, palette = c(\"#2c3e50\", \"#8ca0aa\")) |>    gtExtras::gt_plt_bullet(column = plot_col, target = target_col, palette = c(\"#8ca0aa\", \"black\"), width = 65) |>   gtExtras::gt_plt_bar_stack(list_data, width = 50, labels = c(\"Charges (%) \", \" AR (%)\"), palette = c(\"#2c3e50\", \"#8ca0aa\")) |>   gtExtras::gt_badge(pass, palette = c(\"FALSE\" = \"#8ca0aa\")) |>    gt::tab_style(style = gt::cell_text(color = \"#2c3e50\", weight = \"bolder\"), locations = gt::cells_body(columns = pass, rows = pass == \"FALSE\")) |>   gt::tab_style(style = gt::cell_text(color = \"#8ca0aa\", weight = \"normal\"), locations = gt::cells_body(columns = pass, rows = pass == \"TRUE\")) |>    gt::data_color(columns = c(gct, earb, dar), colors = scales::col_numeric(palette = c(\"#2c3e50\", \"#8ca0aa\") |> as.character(), domain = NULL)) |>    gt::tab_footnote(footnote = \"Horizontal bar indicates Optimal AR, vertical bar is Actual.\", locations = gt::cells_column_labels(columns = plot_col)) |>    gt::tab_header(title = gt::md(\"Example **Days in AR Analysis** with the **{forager}** Package\"))  #gt_2 |> gt::gtsave(\"gt_2.png\", expand = 20) # Create df for gt_plt_bar_stack dar_qtr_2022_pct <- dar_quarter_2022 |>   dplyr::mutate(gct_pct = (gct_qtr / (gct_qtr + earb) * 100),                 earb_pct = (earb / (gct_qtr + earb) * 100)) |>   dplyr::select(nqtr, gct_pct, earb_pct) |>   tidyr::pivot_longer(-nqtr,                        names_to = \"measure\",                        values_to = \"percentage\") |>   dplyr::group_by(nqtr) |>   dplyr::summarize(list_data = list(percentage))  # Right join the two data frames dar_qtr_2022_join <- dplyr::right_join(   dar_quarter_2022,    dar_qtr_2022_pct,    by = \"nqtr\")  # Create new copy cols for gt_plt_bullet dar_qtr_2022_gt <- dar_qtr_2022_join |>    dplyr::select(nqtr,                  gct_qtr,                  earb,                  earb_trg,                  dar,                  pass,                 list_data) |>   dplyr::mutate(target_col = earb,                  plot_col = earb_trg)  # Create gt table gt_qtr_2 <- dar_qtr_2022_gt |>    gt::gt(rowname_col = \"nqtr\") |>   gt::cols_label(     #month = \"Month\",                  gct_qtr = \"Gross Charges\",                  earb = \"Ending AR\",                  earb_trg = \"Optimal AR\",                  dar = \"Days in AR\",                  pass = \"Pass\",                  plot_col = \"Optimal AR Threshold\") |>   # gt::tab_row_group(label = \"Q4\", rows = c(10:12)) |>   # gt::tab_row_group(label = \"Q3\", rows = c(7:9)) |>   # gt::tab_row_group(label = \"Q2\", rows = c(4:6)) |>   # gt::tab_row_group(label = \"Q1\", rows = c(1:3)) |>    #gt::tab_options(row_group.as_column = TRUE) |>    gtExtras::gt_theme_espn() |>    gt::fmt_number(columns = dar) |>   gt::fmt_currency(columns = c(gct_qtr, earb, earb_trg)) |>   #gtExtras::gt_plt_dot(dar, month, palette = c(\"#2c3e50\", \"#8ca0aa\")) |>    gtExtras::gt_plt_bullet(column = plot_col, target = target_col, palette = c(\"#8ca0aa\", \"black\"), width = 65) |>   gtExtras::gt_plt_bar_stack(list_data, width = 50, labels = c(\"Charges (%) \", \" AR (%)\"), palette = c(\"#2c3e50\", \"#8ca0aa\")) |>   gtExtras::gt_badge(pass, palette = c(\"FALSE\" = \"#8ca0aa\")) |>    gt::tab_style(style = gt::cell_text(color = \"#2c3e50\", weight = \"bolder\"), locations = gt::cells_body(columns = pass, rows = pass == \"FALSE\")) |>   gt::tab_style(style = gt::cell_text(color = \"#8ca0aa\", weight = \"normal\"), locations = gt::cells_body(columns = pass, rows = pass == \"TRUE\")) |>    gt::data_color(columns = c(gct_qtr, earb, dar), colors = scales::col_numeric(palette = c(\"#2c3e50\", \"#8ca0aa\") |> as.character(), domain = NULL)) |>    gt::tab_footnote(footnote = \"Horizontal bar indicates Optimal AR, vertical bar is Actual.\", locations = gt::cells_column_labels(columns = plot_col)) |>    gt::tab_header(title = gt::md(\"Example **Days in AR Analysis** with the **{forager}** Package\"))  #gt_qtr_2 |> gt::gtsave(\"gt_qtr_2.png\", expand = 20)"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Healthcare Revenue Cycle Analysis Suite","text":"Please note forager project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Number of Days Between Two Dates — age_days","title":"Calculate Number of Days Between Two Dates — age_days","text":"Calculate Number Days Two Dates","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Number of Days Between Two Dates — age_days","text":"","code":"age_days(df, start, end, colname = \"age\")"},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Number of Days Between Two Dates — age_days","text":"df data frame containing date columns start column containing date(s) prior end_date column end column containing date(s) start_date column colname desired column name output; default \"age\"","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Number of Days Between Two Dates — age_days","text":"tibble named column containing calculated number days.","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Number of Days Between Two Dates — age_days","text":"calculation includes end date sum (see example)","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Number of Days Between Two Dates — age_days","text":"","code":"date_ex <- tibble::tibble(x = seq.Date(as.Date(\"2021-01-01\"),                           by = \"month\", length.out = 3),                           y = seq.Date(as.Date(\"2022-01-01\"),                           by = \"month\", length.out = 3))  age_days(df = date_ex,          start = x,          end = y) #> # A tibble: 3 × 3 #>   x          y            age #>   <date>     <date>     <dbl> #> 1 2021-01-01 2022-01-01   366 #> 2 2021-02-01 2022-02-01   366 #> 3 2021-03-01 2022-03-01   366  date_ex |> age_days(x,          y,          colname = \"days_between_x_y\") #> # A tibble: 3 × 3 #>   x          y          days_between_x_y #>   <date>     <date>                <dbl> #> 1 2021-01-01 2022-01-01              366 #> 2 2021-02-01 2022-02-01              366 #> 3 2021-03-01 2022-03-01              366  date_ex |> age_days(start = x, end = lubridate::today(), colname = \"days_since_x\") #> # A tibble: 3 × 3 #>   x          y          days_since_x #>   <date>     <date>            <dbl> #> 1 2021-01-01 2022-01-01          718 #> 2 2021-02-01 2022-02-01          687 #> 3 2021-03-01 2022-03-01          659  date_ex |> age_days(x, y, \"days_between_x_y\") |> age_days(x, lubridate::today(), \"days_since_x\") |> age_days(y, lubridate::today(), colname = \"days_since_y\") #> # A tibble: 3 × 5 #>   x          y          days_between_x_y days_since_x days_since_y #>   <date>     <date>                <dbl>        <dbl>        <dbl> #> 1 2021-01-01 2022-01-01              366          718          353 #> 2 2021-02-01 2022-02-01              366          687          322 #> 3 2021-03-01 2022-03-01              366          659          294"},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Count days between two dates — count_days","title":"Count days between two dates — count_days","text":"Count days two dates","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count days between two dates — count_days","text":"","code":"count_days(df, start, end, name)"},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count days between two dates — count_days","text":"df data frame start date column end date column name name output column","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count days between two dates — count_days","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count days between two dates — count_days","text":"","code":"generate_data(rows = 5) |> count_days(date_of_service, date_of_release, provider_lag) #> Error in dplyr::mutate(df, `:=`({    {        name    }}, clock::date_count_between({    {        start    }}, {    {        end    }}, \"day\")), .after = {    {        end    }}): Problem while computing `provider_lag = #> clock::date_count_between(date_of_service, date_of_release, \"day\")`. #> Caused by error: #> ! object 'date_of_service' not found"},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Monthly Days in AR — dar_month","title":"Calculate Monthly Days in AR — dar_month","text":"Calculate Monthly Days AR","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Monthly Days in AR — dar_month","text":"","code":"dar_month(df, date, gct, earb, dart = 35)"},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Monthly Days in AR — dar_month","text":"df data frame containing least three columns: date column, gross charges column ending AR column date column containing date within month Days AR calculated gct column containing month's total Gross Charges earb column containing month's Ending AR balance dart target Days AR, default 35 days","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Monthly Days in AR — dar_month","text":"data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Monthly Days in AR — dar_month","text":"","code":"dar_mon_ex <- data.frame( date = as.Date(c( \"2022-01-01\", \"2022-02-01\", \"2022-03-01\", \"2022-04-01\", \"2022-05-01\", \"2022-06-01\", \"2022-07-01\", \"2022-08-01\", \"2022-09-01\", \"2022-10-01\", \"2022-11-01\", \"2022-12-01\")),  gct = c( 325982.23, 297731.74, 198655.14, 186047.56, 123654.34, 131440.28, 153991.95, 156975.52, 146878.12, 163799.44, 151410.74, 169094.46),  earb = c( 288432.52, 307871.08, 253976.56, 183684.92, 204227.59, 203460.47, 182771.32, 169633.64, 179347.72, 178051.11, 162757.49, 199849.32))  dar_month(dar_mon_ex, date, gct, earb, dart = 40) #>          date     month nmon ndip      gct     earb earb_trg     earb_dc #> 1  2022-01-01   January    1   31 325982.2 288432.5 420622.2 -132189.712 #> 2  2022-02-01  February    2   28 297731.7 307871.1 425331.1 -117459.977 #> 3  2022-03-01     March    3   31 198655.1 253976.6 256329.2   -2352.653 #> 4  2022-04-01     April    4   30 186047.6 183684.9 248063.4  -64378.493 #> 5  2022-05-01       May    5   31 123654.3 204227.6 159554.0   44673.603 #> 6  2022-06-01      June    6   30 131440.3 203460.5 175253.7   28206.763 #> 7  2022-07-01      July    7   31 153992.0 182771.3 198699.3  -15927.970 #> 8  2022-08-01    August    8   31 156975.5 169633.6 202549.1  -32915.418 #> 9  2022-09-01 September    9   30 146878.1 179347.7 195837.5  -16489.773 #> 10 2022-10-01   October   10   31 163799.4 178051.1 211354.1  -33303.006 #> 11 2022-11-01  November   11   30 151410.7 162757.5 201881.0  -39123.497 #> 12 2022-12-01  December   12   31 169094.5 199849.3 218186.4  -18337.080 #>       earb_pct       adc      dar  pass    actual    ideal     radiff #> 1  -45.8303773 10515.556 27.42913  TRUE 0.8848106 1.290323 -0.4055120 #> 2  -38.1523257 10633.276 28.95355  TRUE 1.0340553 1.428571 -0.3945161 #> 3   -0.9263268  6408.230 39.63287  TRUE 1.2784797 1.290323 -0.0118429 #> 4  -35.0483280  6201.585 29.61903  TRUE 0.9873009 1.333333 -0.3460325 #> 5   21.8744210  3988.850 51.19962 FALSE 1.6516007 1.290323  0.3612781 #> 6   13.8635104  4381.343 46.43793 FALSE 1.5479309 1.333333  0.2145976 #> 7   -8.7146990  4967.482 36.79355  TRUE 1.1868888 1.290323 -0.1034338 #> 8  -19.4038270  5063.726 33.49976  TRUE 1.0806375 1.290323 -0.2096850 #> 9   -9.1943033  4895.937 36.63195  TRUE 1.2210649 1.333333 -0.1122684 #> 10 -18.7041834  5283.853 33.69721  TRUE 1.0870068 1.290323 -0.2033158 #> 11 -24.0379086  5047.025 32.24821  TRUE 1.0749402 1.333333 -0.2583931 #> 12  -9.1754528  5454.660 36.63827  TRUE 1.1818798 1.290323 -0.1084428"},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_qtr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Quarterly Days in AR — dar_qtr","title":"Calculate Quarterly Days in AR — dar_qtr","text":"Calculate Quarterly Days AR","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_qtr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Quarterly Days in AR — dar_qtr","text":"","code":"dar_qtr(df, date = date, gct = gct, earb = earb, dart = 35)"},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_qtr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Quarterly Days in AR — dar_qtr","text":"df data frame containing least three columns: date column, gross charges column ending AR column date column containing date within month Days AR calculated gct column containing month's total Gross Charges earb column containing month's Ending AR balance dart target Days AR, default 35 days","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_qtr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Quarterly Days in AR — dar_qtr","text":"data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_qtr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Quarterly Days in AR — dar_qtr","text":"","code":"dar_mon_ex <- data.frame( date = as.Date(c( \"2022-01-01\", \"2022-02-01\", \"2022-03-01\", \"2022-04-01\", \"2022-05-01\", \"2022-06-01\", \"2022-07-01\", \"2022-08-01\", \"2022-09-01\", \"2022-10-01\", \"2022-11-01\", \"2022-12-01\")),  gct = c( 325982.23, 297731.74, 198655.14, 186047.56, 123654.34, 131440.28, 153991.95, 156975.52, 146878.12, 163799.44, 151410.74, 169094.46),  earb = c( 288432.52, 307871.08, 253976.56, 183684.92, 204227.59, 203460.47, 182771.32, 169633.64, 179347.72, 178051.11, 162757.49, 199849.32))  dar_qtr(dar_mon_ex, date, gct, earb, dart = 40) #>         date nqtr ndip  gct_qtr     earb earb_trg    earb_dc earb_pct     adc #> 1 2022-03-01    1   90 822369.1 253976.6 365497.4 -111520.82   -43.91 9137.43 #> 2 2022-06-01    2   91 441142.2 203460.5 193908.6    9551.82     4.69 4847.72 #> 3 2022-09-01    3   92 457845.6 179347.7 199063.3  -19715.58   -10.99 4976.58 #> 4 2022-12-01    4   92 484304.6 199849.3 210567.2  -10717.91    -5.36 5264.18 #>     dar  pass actual ideal radiff #> 1 27.80  TRUE   0.31  0.44  -0.13 #> 2 41.97 FALSE   0.46  0.44   0.02 #> 3 36.04  TRUE   0.39  0.43  -0.04 #> 4 37.96  TRUE   0.41  0.43  -0.02"},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mock coding/billing data frame — generate_data","title":"Generate mock coding/billing data frame — generate_data","text":"Generate mock coding/billing data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mock coding/billing data frame — generate_data","text":"","code":"generate_data(rows = 100)"},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mock coding/billing data frame — generate_data","text":"rows number rows generate; default 100","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate mock coding/billing data frame — generate_data","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate mock coding/billing data frame — generate_data","text":"","code":"generate_data(rows = 5) #> # A tibble: 5 × 5 #>   claim_id   payer        ins_class balance    dates            #>   <variable> <chr>        <chr>     <variable> <list>           #> 1 1          Medicaid     Primary   184.80947  <tibble [1 × 5]> #> 2 2          Medicare     Primary    37.97437  <tibble [1 × 5]> #> 3 3          UnitedHealth Secondary 198.64880  <tibble [1 × 5]> #> 4 4          Cigna        Primary    87.87853  <tibble [1 × 5]> #> 5 5          Medicaid     Secondary  46.55743  <tibble [1 × 5]>"},{"path":"https://andrewallenbruce.github.io/forager/news/index.html","id":"forager-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"forager 0.0.0.9001 (2022-08-31)","title":"forager 0.0.0.9001 (2022-08-31)","text":"Added gt table examples","code":""}]

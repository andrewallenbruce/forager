[{"path":[]},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/forager/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"forager package collection functions useful healthcare revenue cycle analysis.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"dar","dir":"Articles","previous_headings":"","what":"DAR","title":"Getting started","text":"Days Accounts Receivable (also known Days AR simply DAR) common financial metric belonging group ratios called efficiency ratios. calculation measures average amount time takes business collect money owed responsible party services rendered billed. name implies, unit measurement employed particular metric days, rather average number days moment physician provides service patient guarantor pays service. number can tell much financial health business. formula calculating DAR :","code":"dar_ex() #> # A tibble: 12 × 3 #>    date       gross_charges ending_ar #>    <date>             <dbl>     <dbl> #>  1 2024-01-01       325982.   288433. #>  2 2024-02-01       297732.   307871. #>  3 2024-03-01       198655.   253977. #>  4 2024-04-01       186048.   183685. #>  5 2024-05-01       123654.   204228. #>  6 2024-06-01       131440.   203460. #>  7 2024-07-01       153992.   182771. #>  8 2024-08-01       156976.   169634. #>  9 2024-09-01       146878.   179348. #> 10 2024-10-01       163799.   178051. #> 11 2024-11-01       151411.   162757. #> 12 2024-12-01       169094.   199849. avg_dar(   df     = dar_ex(),   date   = date,   gct    = gross_charges,   earb   = ending_ar,   dart   = 35,   period = \"month\" ) |>    gt() avg_dar(   df     = dar_ex(),   date   = date,   gct    = gross_charges,   earb   = ending_ar,   dart   = 39,   period = \"quarter\" ) |>    gt()"},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"aging-bins","dir":"Articles","previous_headings":"","what":"Aging Bins","title":"Getting started","text":"","code":"binned <- bin_aging(   df = load_ex(\"aging_ex\"),   date = dos   ) |>   dplyr::select(     dos:ins_class,     dar:aging_bin     )  binned #> # A tibble: 2,618 × 6 #>    dos        charges ins_name   ins_class   dar aging_bin  #>    <date>       <dbl> <chr>      <chr>     <int> <fct>      #>  1 2023-12-27    390. Medicare   Primary     135 (120, 150] #>  2 2023-12-27    173. Patient    Patient     135 (120, 150] #>  3 2023-12-27    246. Blue Cross Primary     135 (120, 150] #>  4 2023-12-27    507. AETNA      Primary     135 (120, 150] #>  5 2023-12-27    483. Blue Cross Primary     135 (120, 150] #>  6 2023-12-27    399. AETNA      Secondary   135 (120, 150] #>  7 2023-12-27    850. Patient    Patient     135 (120, 150] #>  8 2023-12-27    351. Medicare   Primary     135 (120, 150] #>  9 2023-12-27    523. Blue Cross Secondary   135 (120, 150] #> 10 2023-12-27    894. Patient    Patient     135 (120, 150] #> # ℹ 2,608 more rows binned |>    dplyr::arrange(aging_bin) |>    dplyr::summarise(n_claims = dplyr::n(),                     balance = sum(charges),                     .by = aging_bin) |>    dplyr::mutate(      pct_claims = n_claims / sum(n_claims),      pct_balance = balance / sum(balance)) |>    gt() |>    fmt_percent(columns = pct_claims:pct_balance) binned |>   dplyr::arrange(aging_bin, ins_name) |>   dplyr::summarise(     n_claims = dplyr::n(),     balance = sum(charges),     .by = c(aging_bin, ins_name)   ) |>   dplyr::mutate(pct_claims = n_claims / sum(n_claims),                 pct_balance = balance / sum(balance)) |>   gt() |>   fmt_percent(columns = pct_claims:pct_balance) binned |>   dplyr::arrange(ins_name, aging_bin) |>   dplyr::summarise(     n_claims = dplyr::n(),     balance = sum(charges),     .by = c(aging_bin, ins_name)   ) |>   dplyr::mutate(pct_claims = n_claims / sum(n_claims),                 pct_balance = balance / sum(balance),                 .by = ins_name) |>   gt() |>   fmt_percent(columns = pct_claims:pct_balance)"},{"path":"https://andrewallenbruce.github.io/forager/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/forager/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2024). forager: Healthcare Revenue Cycle Analysis Suite. R package version 0.0.0.9001,  https://andrewallenbruce.github.io/forager/, https://github.com/andrewallenbruce/forager.","code":"@Manual{,   title = {forager: Healthcare Revenue Cycle Analysis Suite},   author = {Andrew Bruce},   year = {2024},   note = {R package version 0.0.0.9001,  https://andrewallenbruce.github.io/forager/},   url = {https://github.com/andrewallenbruce/forager}, }"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"forager-","dir":"","previous_headings":"","what":"Healthcare Revenue Cycle Analysis Suite","title":"Healthcare Revenue Cycle Analysis Suite","text":"Forager (noun) person goes place place searching things can eat use.1 Ager (noun) person calls place place searching payment insurance can refuse.2  forager work--progress, goal become suite integrated analytics tools focused comprehensive overview healthcare organization’s operational financial performance areas. Build rule-based, automated reporting pipeline monitor: Patient Scheduling Coding / Billing Productivity Collections & /R Denial Management","code":""},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Healthcare Revenue Cycle Analysis Suite","text":"can install development version forager GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewallenbruce/forager\")  # install.packages(\"remotes\") remotes::install_github(\"andrewallenbruce/forager\") library(forager)"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"foundation-time-measurement","dir":"","previous_headings":"","what":"Foundation: Time Measurement","title":"Healthcare Revenue Cycle Analysis Suite","text":"Everything Healthcare RCM workflow built upon bedrock time measurement. Task created time t. Subtask a1 assigned time t1 responsible party x1. Subtask a2 assigned time t2 responsible party x2. , forth … Task ai completed time ti. Measuring amount time step becomes crucial identifying workflow issues.","code":""},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"example-the-lifecycle-of-a-claim","dir":"","previous_headings":"Foundation: Time Measurement","what":"Example: The Lifecycle of a Claim","title":"Healthcare Revenue Cycle Analysis Suite","text":"Provider Lag: Days Date Service Date Release Billing Lag: Days Date Release Date Submission Acceptance Lag: Days Date Submission Date Acceptance Payment Lag: Days Date Acceptance Date Adjudication Days AR: Days Date Release Date Adjudication","code":"x <- forager::generate_data(15000) x |> head(n = 10) #> # A tibble: 10 × 5 #>    claim_id   payer        ins_class balance    dates            #>    <variable> <chr>        <chr>     <variable> <list>           #>  1 00001      Medicaid     Secondary 152.85747  <tibble [1 × 5]> #>  2 00002      UnitedHealth Secondary  36.05447  <tibble [1 × 5]> #>  3 00003      Centene      Secondary  90.33910  <tibble [1 × 5]> #>  4 00004      UnitedHealth Secondary  51.64573  <tibble [1 × 5]> #>  5 00005      Medicaid     Secondary 154.65047  <tibble [1 × 5]> #>  6 00006      Humana       Secondary 132.19150  <tibble [1 × 5]> #>  7 00007      Centene      Primary    77.79067  <tibble [1 × 5]> #>  8 00008      Humana       Secondary 139.89570  <tibble [1 × 5]> #>  9 00009      Anthem       Primary    71.28777  <tibble [1 × 5]> #> 10 00010      Centene      Secondary 141.13423  <tibble [1 × 5]> x |> tidyr::unnest(dates) |>       tidyr::pivot_longer(cols = tidyr::starts_with(\"date\"),                           names_to = \"date_type\",                           values_to = \"date\") |>                           head(n = 10) |>                           gluedown::md_table() x |> tidyr::unnest(dates) |>    count_days(date_of_service, date_of_release, provider_lag) |>    count_days(date_of_release, date_of_submission, billing_lag) |>    count_days(date_of_submission, date_of_acceptance, processing_lag) |>    count_days(date_of_submission, date_of_adjudication, payer_lag) |>    count_days(date_of_release, date_of_adjudication, days_in_ar) |>    dplyr::group_by(month = clock::date_month_factor(date_of_service)) |>    dplyr::summarise(no_of_claims = dplyr::n(),                     balance_total = sum(balance),                    avg_prov_lag = round(mean(provider_lag), 2),                     avg_bill_lag = round(mean(billing_lag), 2),                    avg_accept_lag = round(mean(processing_lag), 2),                    avg_pay_lag = round(mean(payer_lag), 2),                    avg_days_in_ar = round(mean(days_in_ar), 2), .groups = \"drop\") |>    gluedown::md_table() x |> tidyr::unnest(dates) |>    count_days(date_of_service, date_of_release, provider_lag) |>    count_days(date_of_release, date_of_submission, billing_lag) |>    count_days(date_of_submission, date_of_acceptance, processing_lag) |>    count_days(date_of_submission, date_of_adjudication, payer_lag) |>    count_days(date_of_release, date_of_adjudication, days_in_ar) |>    dplyr::group_by(qtr = lubridate::quarter(date_of_service)) |>    dplyr::summarise(no_of_claims = dplyr::n(), balance_total = sum(balance), avg_prov_lag = round(mean(provider_lag), 2), avg_bill_lag = round(mean(billing_lag), 2),                    avg_accept_lag = round(mean(processing_lag), 2),                       avg_pay_lag = round(mean(payer_lag), 2),                       avg_days_in_ar = round(mean(days_in_ar), 2), .groups = \"drop\") |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"aging-calculation","dir":"","previous_headings":"","what":"Aging Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"x |>    tidyr::unnest(dates) |>    forager:::count_days(date_of_service, date_of_adjudication, days_in_ar) |>    dplyr::group_by(aging_bucket = cut(days_in_ar, breaks = seq(0, 500, by = 30))) |>    dplyr::summarise(no_of_claims = dplyr::n(),                    balance_total = sum(balance), .groups = \"drop\") |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"days-in-ar-monthly-calculation","dir":"","previous_headings":"","what":"Days in AR Monthly Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"y <- tibble::tibble(   date = clock::date_build(2022, 1:12),   gct = abs(rnorm(12, c(365000.567, 169094.46, 297731.74), c(2:3))),   earb = abs(rnorm(12, c(182771.32, 169633.64, 179347.72), c(2:3))))  y |>    forager::dar_month(date, gct, earb, dart = 35) |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"days-in-ar-quarterly-calculation","dir":"","previous_headings":"","what":"Days in AR Quarterly Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"y |> forager::dar_qtr(date, gct, earb, 35) |>       gluedown::md_table()"},{"path":[]},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Healthcare Revenue Cycle Analysis Suite","text":"Please note forager project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Number of Days Between Two Dates — age_days","title":"Calculate Number of Days Between Two Dates — age_days","text":"Calculate Number Days Two Dates","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Number of Days Between Two Dates — age_days","text":"","code":"age_days(df, start, end, colname = \"age\")"},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Number of Days Between Two Dates — age_days","text":"df data frame containing date columns start column containing date(s) prior end_date column end column containing date(s) start_date column colname desired column name output; default \"age\"","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Number of Days Between Two Dates — age_days","text":"tibble named column containing calculated number days.","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Number of Days Between Two Dates — age_days","text":"calculation includes end date sum (see example)","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/age_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Number of Days Between Two Dates — age_days","text":"","code":"date_ex <- dplyr::tibble(x = seq.Date(as.Date(\"2021-01-01\"),                           by = \"month\", length.out = 3),                           y = seq.Date(as.Date(\"2022-01-01\"),                           by = \"month\", length.out = 3))  age_days(df = date_ex,          start = x,          end = y) #> # A tibble: 3 × 3 #>   x          y            age #>   <date>     <date>     <dbl> #> 1 2021-01-01 2022-01-01   366 #> 2 2021-02-01 2022-02-01   366 #> 3 2021-03-01 2022-03-01   366  date_ex |> age_days(x,          y,          colname = \"days_between_x_y\") #> # A tibble: 3 × 3 #>   x          y          days_between_x_y #>   <date>     <date>                <dbl> #> 1 2021-01-01 2022-01-01              366 #> 2 2021-02-01 2022-02-01              366 #> 3 2021-03-01 2022-03-01              366  date_ex |> age_days(start = x, end = lubridate::today(), colname = \"days_since_x\") #> # A tibble: 3 × 3 #>   x          y          days_since_x #>   <date>     <date>            <dbl> #> 1 2021-01-01 2022-01-01         1226 #> 2 2021-02-01 2022-02-01         1195 #> 3 2021-03-01 2022-03-01         1167  date_ex |> age_days(x, y, \"days_between_x_y\") |> age_days(x, lubridate::today(), \"days_since_x\") |> age_days(y, lubridate::today(), colname = \"days_since_y\") #> # A tibble: 3 × 5 #>   x          y          days_between_x_y days_since_x days_since_y #>   <date>     <date>                <dbl>        <dbl>        <dbl> #> 1 2021-01-01 2022-01-01              366         1226          861 #> 2 2021-02-01 2022-02-01              366         1195          830 #> 3 2021-03-01 2022-03-01              366         1167          802"},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Average Days in AR — avg_dar","title":"Calculate Average Days in AR — avg_dar","text":"Calculate Average Days AR","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Average Days in AR — avg_dar","text":"","code":"avg_dar(df, date, gct, earb, dart = 35, period = c(\"month\", \"quarter\"))"},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Average Days in AR — avg_dar","text":"df <data.frame> <tibble> date column <date>s gct <dbl> column total Gross Charges earb <dbl> column ending accounts receivable balances dart <dbl> Target Days AR, default 35 days period <chr> string specifying calculation period; one \"month\", \"quarter\", \"year\"; defaults \"month\"","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Average Days in AR — avg_dar","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Average Days in AR — avg_dar","text":"","code":"avg_dar(df     = dar_ex(),         date   = date,         gct    = gross_charges,         earb   = ending_ar,         dart   = 35,         period = \"month\") #> # A tibble: 12 × 27 #>    date       gross_charges ending_ar  nmon mon   month   nqtr  yqtr dqtr   year #>    <date>             <dbl>     <dbl> <dbl> <ord> <ord>  <int> <dbl> <chr> <dbl> #>  1 2024-01-01       325982.   288433.     1 Jan   Janua…     1 2024. 1Q24   2024 #>  2 2024-02-01       297732.   307871.     2 Feb   Febru…     1 2024. 1Q24   2024 #>  3 2024-03-01       198655.   253977.     3 Mar   March      1 2024. 1Q24   2024 #>  4 2024-04-01       186048.   183685.     4 Apr   April      2 2024. 2Q24   2024 #>  5 2024-05-01       123654.   204228.     5 May   May        2 2024. 2Q24   2024 #>  6 2024-06-01       131440.   203460.     6 Jun   June       2 2024. 2Q24   2024 #>  7 2024-07-01       153992.   182771.     7 Jul   July       3 2024. 3Q24   2024 #>  8 2024-08-01       156976.   169634.     8 Aug   August     3 2024. 3Q24   2024 #>  9 2024-09-01       146878.   179348.     9 Sep   Septe…     3 2024. 3Q24   2024 #> 10 2024-10-01       163799.   178051.    10 Oct   Octob…     4 2024. 4Q24   2024 #> 11 2024-11-01       151411.   162757.    11 Nov   Novem…     4 2024. 4Q24   2024 #> 12 2024-12-01       169094.   199849.    12 Dec   Decem…     4 2024. 4Q24   2024 #> # ℹ 17 more variables: ymon <dbl>, myear <chr>, nhalf <int>, yhalf <dbl>, #> #   dhalf <chr>, ndip <int>, adc <dbl>, dar <dbl>, dar_pass <lgl>, #> #   dar_diff <dbl>, ratio_actual <dbl>, ratio_ideal <dbl>, ratio_diff <dbl>, #> #   ending_ar_target <dbl>, ending_ar_dec_abs <dbl>, ending_ar_dec_pct <dbl>, #> #   earb_gct_diff <dbl>  avg_dar(df     = dar_ex(),         date   = date,         gct    = gross_charges,         earb   = ending_ar,         dart   = 35,         period = \"quarter\") #> # A tibble: 4 × 18 #>   date       ending_ar  nmon  nqtr month     gross_charges  ndip   adc   dar #>   <date>         <dbl> <dbl> <int> <ord>             <dbl> <int> <dbl> <dbl> #> 1 2024-03-01   253977.     3     1 March           822369.    91 9037.  28.1 #> 2 2024-06-01   203460.     6     2 June            441142.    91 4848.  42.0 #> 3 2024-09-01   179348.     9     3 September       457846.    92 4977.  36.0 #> 4 2024-12-01   199849.    12     4 December        484305.    92 5264.  38.0 #> # ℹ 9 more variables: dar_pass <lgl>, dar_diff <dbl>, ratio_actual <dbl>, #> #   ratio_ideal <dbl>, ratio_diff <dbl>, ending_ar_target <dbl>, #> #   ending_ar_dec_abs <dbl>, ending_ar_dec_pct <dbl>, earb_gct_diff <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply 30-Day Aging Bins — bin_aging","title":"Apply 30-Day Aging Bins — bin_aging","text":"Apply 30-Day Aging Bins","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply 30-Day Aging Bins — bin_aging","text":"","code":"bin_aging(df, date, bin_type = \"chop\")"},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply 30-Day Aging Bins — bin_aging","text":"df <data.frame> <tibble> date column <date>s bin_type <chr> string specifying bin type; one \"chop\", \"cut\" \"ivs\"","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply 30-Day Aging Bins — bin_aging","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply 30-Day Aging Bins — bin_aging","text":"","code":"binned <- bin_aging(   df = load_ex(\"aging_ex\"),   date = dos ) |>   dplyr::select(     dos:ins_class,     dar:aging_bin   )  head(binned) #> # A tibble: 6 × 6 #>   dos        charges ins_name   ins_class   dar aging_bin  #>   <date>       <dbl> <chr>      <chr>     <int> <fct>      #> 1 2023-12-27    390. Medicare   Primary     135 (120, 150] #> 2 2023-12-27    173. Patient    Patient     135 (120, 150] #> 3 2023-12-27    246. Blue Cross Primary     135 (120, 150] #> 4 2023-12-27    507. AETNA      Primary     135 (120, 150] #> 5 2023-12-27    483. Blue Cross Primary     135 (120, 150] #> 6 2023-12-27    399. AETNA      Secondary   135 (120, 150]  binned |>   dplyr::arrange(aging_bin) |>   dplyr::summarise(n_claims = dplyr::n(),                    balance = sum(charges),                    .by = aging_bin) |>   dplyr::mutate(     tot_claims = sum(n_claims),     tot_balance = sum(balance),     pct_claims = n_claims / tot_claims,     pct_balance = balance / tot_balance) |>   print(n = 50) #> # A tibble: 5 × 7 #>   aging_bin  n_claims balance tot_claims tot_balance pct_claims pct_balance #>   <fct>         <int>   <dbl>      <int>       <dbl>      <dbl>       <dbl> #> 1 (0, 30]        1189 580745.       2618    1300942.     0.454       0.446  #> 2 (30, 60]        375 187384.       2618    1300942.     0.143       0.144  #> 3 (60, 90]        448 219618.       2618    1300942.     0.171       0.169  #> 4 (90, 120]       412 211771.       2618    1300942.     0.157       0.163  #> 5 (120, 150]      194 101424.       2618    1300942.     0.0741      0.0780  binned |>   dplyr::arrange(aging_bin, ins_name) |>   dplyr::summarise(     n_claims = dplyr::n(),     balance = sum(charges),     .by = c(aging_bin, ins_name)   ) |>   dplyr::mutate(     tot_claims = sum(n_claims),     tot_balance = sum(balance),     pct_claims = n_claims / tot_claims,     pct_balance = balance / tot_balance) |>   print(n = 50) #> # A tibble: 29 × 8 #>    aging_bin  ins_name   n_claims balance tot_claims tot_balance pct_claims #>    <fct>      <chr>         <int>   <dbl>      <int>       <dbl>      <dbl> #>  1 (0, 30]    AETNA            97  46333.       2618    1300942.    0.0371  #>  2 (0, 30]    Blue Cross      251 124140.       2618    1300942.    0.0959  #>  3 (0, 30]    CIGNA           134  60731.       2618    1300942.    0.0512  #>  4 (0, 30]    Coventry         14   6721.       2618    1300942.    0.00535 #>  5 (0, 30]    Medicare        224 106699.       2618    1300942.    0.0856  #>  6 (0, 30]    Patient         469 236121.       2618    1300942.    0.179   #>  7 (30, 60]   AETNA            40  24104.       2618    1300942.    0.0153  #>  8 (30, 60]   Blue Cross       70  35338.       2618    1300942.    0.0267  #>  9 (30, 60]   CIGNA            39  16615.       2618    1300942.    0.0149  #> 10 (30, 60]   Coventry          5   1626.       2618    1300942.    0.00191 #> 11 (30, 60]   Medicare         69  34708.       2618    1300942.    0.0264  #> 12 (30, 60]   Patient         152  74992.       2618    1300942.    0.0581  #> 13 (60, 90]   AETNA            50  27968.       2618    1300942.    0.0191  #> 14 (60, 90]   Blue Cross       87  41772.       2618    1300942.    0.0332  #> 15 (60, 90]   CIGNA            43  19640.       2618    1300942.    0.0164  #> 16 (60, 90]   Coventry          6   3673.       2618    1300942.    0.00229 #> 17 (60, 90]   Medicare         84  41172.       2618    1300942.    0.0321  #> 18 (60, 90]   Patient         178  85393.       2618    1300942.    0.0680  #> 19 (90, 120]  AETNA            47  25881.       2618    1300942.    0.0180  #> 20 (90, 120]  Blue Cross       82  42135.       2618    1300942.    0.0313  #> 21 (90, 120]  CIGNA            37  18908.       2618    1300942.    0.0141  #> 22 (90, 120]  Coventry          5   3721.       2618    1300942.    0.00191 #> 23 (90, 120]  Medicare         87  42757.       2618    1300942.    0.0332  #> 24 (90, 120]  Patient         154  78368.       2618    1300942.    0.0588  #> 25 (120, 150] AETNA            20  10011.       2618    1300942.    0.00764 #> 26 (120, 150] Blue Cross       45  26658.       2618    1300942.    0.0172  #> 27 (120, 150] CIGNA            26  15850.       2618    1300942.    0.00993 #> 28 (120, 150] Medicare         33  13040.       2618    1300942.    0.0126  #> 29 (120, 150] Patient          70  35865.       2618    1300942.    0.0267  #> # ℹ 1 more variable: pct_balance <dbl>  binned |>   dplyr::arrange(ins_name, aging_bin) |>   dplyr::summarise(     n_claims = dplyr::n(),     balance = sum(charges),     .by = c(aging_bin, ins_name)   ) |>   dplyr::mutate(     tot_claims = sum(n_claims),     tot_balance = sum(balance),     pct_claims = n_claims / tot_claims,     pct_balance = balance / tot_balance,     .by = ins_name) |>   print(n = 50) #> # A tibble: 29 × 8 #>    aging_bin  ins_name   n_claims balance tot_claims tot_balance pct_claims #>    <fct>      <chr>         <int>   <dbl>      <int>       <dbl>      <dbl> #>  1 (0, 30]    AETNA            97  46333.        254     134298.     0.382  #>  2 (30, 60]   AETNA            40  24104.        254     134298.     0.157  #>  3 (60, 90]   AETNA            50  27968.        254     134298.     0.197  #>  4 (90, 120]  AETNA            47  25881.        254     134298.     0.185  #>  5 (120, 150] AETNA            20  10011.        254     134298.     0.0787 #>  6 (0, 30]    Blue Cross      251 124140.        535     270042.     0.469  #>  7 (30, 60]   Blue Cross       70  35338.        535     270042.     0.131  #>  8 (60, 90]   Blue Cross       87  41772.        535     270042.     0.163  #>  9 (90, 120]  Blue Cross       82  42135.        535     270042.     0.153  #> 10 (120, 150] Blue Cross       45  26658.        535     270042.     0.0841 #> 11 (0, 30]    CIGNA           134  60731.        279     131744.     0.480  #> 12 (30, 60]   CIGNA            39  16615.        279     131744.     0.140  #> 13 (60, 90]   CIGNA            43  19640.        279     131744.     0.154  #> 14 (90, 120]  CIGNA            37  18908.        279     131744.     0.133  #> 15 (120, 150] CIGNA            26  15850.        279     131744.     0.0932 #> 16 (0, 30]    Coventry         14   6721.         30      15740.     0.467  #> 17 (30, 60]   Coventry          5   1626.         30      15740.     0.167  #> 18 (60, 90]   Coventry          6   3673.         30      15740.     0.2    #> 19 (90, 120]  Coventry          5   3721.         30      15740.     0.167  #> 20 (0, 30]    Medicare        224 106699.        497     238378.     0.451  #> 21 (30, 60]   Medicare         69  34708.        497     238378.     0.139  #> 22 (60, 90]   Medicare         84  41172.        497     238378.     0.169  #> 23 (90, 120]  Medicare         87  42757.        497     238378.     0.175  #> 24 (120, 150] Medicare         33  13040.        497     238378.     0.0664 #> 25 (0, 30]    Patient         469 236121.       1023     510739.     0.458  #> 26 (30, 60]   Patient         152  74992.       1023     510739.     0.149  #> 27 (60, 90]   Patient         178  85393.       1023     510739.     0.174  #> 28 (90, 120]  Patient         154  78368.       1023     510739.     0.151  #> 29 (120, 150] Patient          70  35865.       1023     510739.     0.0684 #> # ℹ 1 more variable: pct_balance <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Count days between two dates — count_days","title":"Count days between two dates — count_days","text":"Count days two dates","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count days between two dates — count_days","text":"","code":"count_days(df, start, end = lubridate::today(), name)"},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count days between two dates — count_days","text":"df data frame start date column end date column name name output column","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count days between two dates — count_days","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/count_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count days between two dates — count_days","text":"","code":"generate_data(rows = 5) |>   tidyr::unnest(dates) |>   count_days(date_of_service,              date_of_release,              provider_lag) #> # A tibble: 5 × 10 #>   claim_id   payer        ins_class balance    date_of_service date_of_release #>   <variable> <chr>        <chr>     <variable> <date>          <date>          #> 1 1          Anthem       Secondary  59.90037  2021-11-10      2021-11-21      #> 2 2          Medicare     Primary    42.31207  2021-06-10      2021-06-23      #> 3 3          UnitedHealth Primary    11.16570  2022-01-10      2022-01-17      #> 4 4          UnitedHealth Secondary 144.18263  2021-12-10      2021-12-23      #> 5 5          BCBS         Secondary  47.93740  2022-02-10      2022-02-22      #> # ℹ 4 more variables: provider_lag <int>, date_of_submission <date>, #> #   date_of_acceptance <date>, date_of_adjudication <date>"},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Days in AR Example Data — dar_ex","title":"Days in AR Example Data — dar_ex","text":"Days AR Example Data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Days in AR Example Data — dar_ex","text":"","code":"dar_ex()"},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mock coding/billing data frame — generate_data","title":"Generate mock coding/billing data frame — generate_data","text":"Generate mock coding/billing data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mock coding/billing data frame — generate_data","text":"","code":"generate_data(rows = 100)"},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mock coding/billing data frame — generate_data","text":"rows number rows generate; default 100","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate mock coding/billing data frame — generate_data","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate mock coding/billing data frame — generate_data","text":"","code":"generate_data(rows = 5) #> # A tibble: 5 × 5 #>   claim_id   payer    ins_class balance    dates            #>   <variable> <chr>    <chr>     <variable> <list>           #> 1 1          Cigna    Primary   396.43347  <tibble [1 × 5]> #> 2 2          Anthem   Secondary 143.87567  <tibble [1 × 5]> #> 3 3          Humana   Secondary 328.01177  <tibble [1 × 5]> #> 4 4          Medicaid Primary    50.07973  <tibble [1 × 5]> #> 5 5          Medicare Primary   147.35173  <tibble [1 × 5]>"},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Load example data — load_ex","title":"Load example data — load_ex","text":"Load example data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load example data — load_ex","text":"","code":"load_ex(name)"},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load example data — load_ex","text":"name <chr> name example dataset","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load example data — load_ex","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/net_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Net Prediction Example Data — net_ex","title":"Net Prediction Example Data — net_ex","text":"Net Prediction Example Data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/net_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Net Prediction Example Data — net_ex","text":"","code":"net_ex()"},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Lirov's Net Payment Estimation — predict_net","title":"Lirov's Net Payment Estimation — predict_net","text":"Lirov's Net Payment Estimation","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lirov's Net Payment Estimation — predict_net","text":"","code":"predict_net(df, date, gct, earb, net, parb_120)"},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lirov's Net Payment Estimation — predict_net","text":"df <data.frame> <tibble> date column <date>s gct <dbl> column total Gross Charges earb <dbl> column ending accounts receivable balances net column net payments parb_120 column percentage AR beyond 120 days old","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lirov's Net Payment Estimation — predict_net","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lirov's Net Payment Estimation — predict_net","text":"","code":"predict_net(   net_ex(),   date,   gct,   earb,   net,   parb_120) #> # A tibble: 13 × 11 #>    date           gct    earb earb_lt120 earb_gt120 parl_120 parb_120 pct_paid #>    <date>       <dbl>   <dbl>      <dbl>      <dbl>    <dbl>    <dbl>    <dbl> #>  1 2024-01-01 325982  288433.    282375.      6057.    0.979    0.021    0.320 #>  2 2024-02-01 297732. 307871.    293401.     14470.    0.953    0.047    0.418 #>  3 2024-03-01 198655. 253977.    234928.     19048.    0.925    0.075    0.601 #>  4 2024-04-01 186047  183685.    179828.      3857.    0.979    0.021    0.386 #>  5 2024-05-01 123654  204228.    194629.      9599.    0.953    0.047    0.405 #>  6 2024-06-01 131440. 203460.    188201.     15260.    0.925    0.075    0.500 #>  7 2024-07-01 153991  182771.    178933.      3838.    0.979    0.021    0.554 #>  8 2024-08-01 156975  169634.    161661.      7973.    0.953    0.047    0.434 #>  9 2024-09-01 146878. 179348.    165897.     13451.    0.925    0.075    0.502 #> 10 2024-10-01 163799. 178051.    174312.      3739.    0.979    0.021    0.497 #> 11 2024-11-01 151411. 162757.    155108.      7650.    0.953    0.047    0.518 #> 12 2024-12-01 169094. 199849.    184861.     14989.    0.925    0.075    0.408 #> 13 2025-01-01     NA      NA         NA         NA    NA       NA       NA     #> # ℹ 3 more variables: net <dbl>, net_pred <dbl>, net_diff <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/news/index.html","id":"forager-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"forager 0.0.0.9001 (2022-08-31)","title":"forager 0.0.0.9001 (2022-08-31)","text":"Added gt table examples","code":""}]

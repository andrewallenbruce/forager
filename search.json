[{"path":[]},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/forager/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/aging-of_accounts.html","id":"percentage-of-accounts-receivable-beyond-x-days-parbx","dir":"Articles","previous_headings":"","what":"Percentage of Accounts Receivable Beyond X Days (PARBX)","title":"Aging of Accounts","text":"PARBX resolves sensitivity issues DAR metric. offers simple billing process metric ’s dependent charge. graphic representation skewed bell shape (Figures 12 13.) steepness represents billing process quality; steep curve thin tail mean healthy billing process, flat bell fat tail also mean billing problems. According MGMA survey, 25%-35% average family practice’s accounts receivables 120 days old 1997. number improved 17.7% 2004.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/aging-of_accounts.html","id":"patient-liability","dir":"Articles","previous_headings":"","what":"Patient Liability","title":"Aging of Accounts","text":"percentage patient liability ratio patient responsibility total billed charges, roughly reflects patient deductibles. metric important measuring front office function little clean claim submission effective follow-.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/aging-of_accounts.html","id":"first-pass-pay-fpp-rate-and-denial-rate","dir":"Articles","previous_headings":"","what":"First-Pass Pay (FPP) Rate and Denial Rate","title":"Aging of Accounts","text":"FPP Rate percentage claims paid full upon first submission (subject federal state timely payment regulations; state laws require 15 days electronic submission 30 days paper submission.) denial rate complementary metric FPP rate. counts percentage claims require follow-therefore cost process. Follow-may take form phone call payer discover lost claim, receive interpretation denial message, correct earlier submitted data, resubmit original claim, consult provider medical note, denial appeal. FPP denial rates important metrics often used billing process improvement. upside FPP/denial metric ’s affected charge, downside hides differences process imperfections claim submission claim payment sides. identify patterns problem CPT codes payers, FPP/denial metric needs computed compared across payer-CPT code pairs, standard feature modern billing technologies.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"days-in-accounts-receivable","dir":"Articles","previous_headings":"","what":"Days in Accounts Receivable","title":"DAR Formulas","text":"Days Accounts Receivable mathematical formula calculates average number days takes business collect money owed. DAR number low. high DAR number tells problem revenue cycle. Days Accounts Receivable (also known Days AR simply DAR) common financial metric belonging group ratios called efficiency ratios. calculation measures average amount time takes business collect money owed responsible party services rendered billed. name implies, unit measurement employed particular metric days, rather average number days moment physician provides service patient guarantor pays service. number can tell much financial health business. Days Accounts Receivable (DAR) growing number days AR symptomatic faulty billing process. One way determine DAR count days date service date payment every claim, average across claims. simpler way compute average days AR taking ratio AR average daily charges, Days AR = (Accounts Receivable / Average Charge) x 365 metric also depends medical specialty, patient demographics, payer mix, CPT sample. Another downside metric sensitive provider counts lag time unsubmitted claims services already delivered. lag time roughly averages across payers, making DAR effective comparison metric payers individual provider, invalidating across multiple providers. One obvious advantage DAR metric independence charges. averaging feature eliminates sensitivity specific day CPT, also hides behavior shape AR curve. formula calculating \\(dar\\) : \\({dar} = \\dfrac {earb} {{gct} \\div {ndip}}\\)  : ${ndip} = $ Number Days Period ${gct} = $ Total Gross Charges ${earb} = $ Ending AR Balance","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"number-of-days-in-the-period","dir":"Articles","previous_headings":"Days in Accounts Receivable","what":"Number of Days in the Period","title":"DAR Formulas","text":"number days within period measuring Days AR. DAR typically measured monthly quarterly increments, number usually hover around 30, 60, 90, etc.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"total-gross-charges","dir":"Articles","previous_headings":"Days in Accounts Receivable","what":"Total Gross Charges","title":"DAR Formulas","text":"Gross charges, full fee schedule charges1, charges generated practice, regardless actual reimbursement. Gross Charges figure total dollar amount charged Number Days Period measuring. Whether billed insurance claim self-pay patient, charges period included .","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"ending-ar-balance","dir":"Articles","previous_headings":"Days in Accounts Receivable","what":"Ending AR Balance","title":"DAR Formulas","text":"Accounts Receivables balance close business (COB) final day Period measuring. figure total amount money owed practice patients, insurance companies, entities services rendered.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"example-calculation","dir":"Articles","previous_headings":"Days in Accounts Receivable","what":"Example Calculation","title":"DAR Formulas","text":"Let’s say following data: Number Days Period = 30 Total Gross Charges = $180,000 Ending AR Balance = $77,400 calculation look like : \\(\\dfrac {77,400} {180,000 \\div 30} = 12.9\\) , R:","code":"dar <- function(earb, gct, ndip) {   earb / (gct / ndip) }  dar(earb = 77400,      gct = 180000,      ndip = 30) #> [1] 12.9"},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"dar-targets","dir":"Articles","previous_headings":"","what":"DAR Targets","title":"DAR Formulas","text":"\\(earb_t = (dar_t \\times gct) \\div ndip\\) \\(gct_t = (earb \\times ndip) \\div dar_t\\) \\(ndip_t = (dar_t \\times gct) \\div earb\\) \\(dar_t = (earb \\times ndip) \\div gct\\)","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"forager package collection functions useful healthcare revenue cycle analysis.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"days-in-accounts-receivable","dir":"Articles","previous_headings":"","what":"Days in Accounts Receivable","title":"Getting started","text":"","code":"dar_ex() #> # A tibble: 12 × 3 #>    date       gross_charges ending_ar #>    <date>             <dbl>     <dbl> #>  1 2024-01-01       325982.   288433. #>  2 2024-02-01       297732.   307871. #>  3 2024-03-01       198655.   253977. #>  4 2024-04-01       186048.   183685. #>  5 2024-05-01       123654.   204228. #>  6 2024-06-01       131440.   203460. #>  7 2024-07-01       153992.   182771. #>  8 2024-08-01       156976.   169634. #>  9 2024-09-01       146878.   179348. #> 10 2024-10-01       163799.   178051. #> 11 2024-11-01       151411.   162757. #> 12 2024-12-01       169094.   199849. dar_mon <- avg_dar(   df     = dar_ex(),   date   = date,   gct    = gross_charges,   earb   = ending_ar,   dart   = 35,   by = \"month\" ) dar_mon |>    gt(rowname_col = \"mon\") |>    cols_hide(     c(       date,       nmon,       month,       nqtr,       yqtr,       dqtr,       year,       ymon,       myear,       nhalf,       yhalf,       dhalf,       ndip,       ending_ar_target,       dar_diff,       ratio_ideal,       ratio_actual     )   ) |>    fmt_currency(columns = c(gross_charges,                             ending_ar,                             adc,                             ending_ar_target,                             ending_ar_dec_abs,                             earb_gct_diff)) |>    fmt_percent(columns = c(ending_ar_dec_pct)) |>    fmt_number(columns = c(dar,                           dar_diff,                           ratio_actual,                           ratio_ideal,                           ratio_diff)) |>    cols_move_to_start(c(mon,                         gross_charges,                         ending_ar,                         earb_gct_diff,                        adc,                         dar_pass,                         dar,                         dar_diff,                         ratio_actual,                         ratio_ideal,                         ratio_diff,                         ending_ar_target,                         ending_ar_dec_abs,                         ending_ar_dec_pct                        )) |>    cols_label(     mon = \"Month\",     gross_charges = \"Gross Charges\",     ending_ar = \"Ending AR\",     adc = \"ADC\",     dar_pass = \"\",     dar = \"DAR\",     ratio_diff = \"AR/GC Diff\",     ending_ar_dec_abs = \"AR Decrease Needed\",     ending_ar_dec_pct = \"%\",     earb_gct_diff = \"AR - GC\"   ) |>    opt_stylize() dar_mon |>    ggplot(aes(x = mon, y = dar)) +   geom_line(group = 1, linetype = \"dashed\", alpha = 0.7) +   geom_hline(yintercept = 35, color = \"red\") +   labs(title = \"Days in AR by Month\", x = NULL, y = NULL) +   theme_minimal() dar_ex() |>   ggplot() +   geom_line(aes(x = date, y = ending_ar),             alpha = 0.7,             linewidth = 1.5) +   geom_line(     aes(x = date, y = gross_charges),     color = \"red\",     alpha = 0.7,     linewidth = 1.5) +   scale_y_continuous(labels = dollar_format(prefix = \"$\")) +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b\") +   labs(title = NULL, x = NULL, y = NULL) dar_mon |>   ggplot(aes(x = ending_ar, y = dar)) +   geom_point() +   geom_hline(yintercept = 35, color = \"red\") +   scale_x_continuous(labels = dollar_format(prefix = \"$\"), limits = c(0, max(dar_mon$gross_charges))) +   labs(title = \"Days in AR by Month\", x = NULL, y = NULL) +   facet_wrap( ~ month) +   coord_flip() +   theme_minimal() ggplot() +   geom_point(data = dar_mon,              aes(x = gross_charges, y = ending_ar),              group = 1) +   geom_point(     data = dar_mon,     aes(x = gross_charges, y = ending_ar_target),     group = 1,     color = \"red\"   ) +   geom_abline(data = dar_mon,               aes(intercept = 0, slope = ratio_ideal),               color = \"red\") +   geom_abline(     data = dar_mon,     aes(intercept = 0, slope = ratio_actual),     color = \"blue\",     linewidth = 1.5,     alpha = 0.25   ) +   facet_wrap( ~ month, scales = \"free_x\") +   scale_y_continuous(labels = dollar_format(prefix = \"$\"), limits = c(0, max(     c(dar_mon$ending_ar, dar_mon$ending_ar_target)   ))) +   scale_x_continuous(labels = dollar_format(prefix = \"$\"), limits = c(0, max(dar_mon$gross_charges))) +   scale_shape_identity() +   labs(title = NULL, x = \"Total Gross Charges\", y = \"Ending AR Balance\") +   theme(legend.position = \"none\") avg_dar(   df     = dar_ex(),   date   = date,   gct    = gross_charges,   earb   = ending_ar,   dart   = 35,   by = \"month\" ) |>    select(     month,     gross_charges,     ending_ar,     ending_ar_target,     dar,     dar_pass     ) |>    headliner::add_headline_column(     x = ending_ar,      y = ending_ar_target,      headline = \"{delta_p}% {trend} than Target\",      trend_phrases = headliner::trend_terms(more = \"HIGHER\", less = \"Lower\"),      n_decimal = 0) |>    gt(rowname_col = \"month\") |>   cols_label(     gross_charges = \"Gross Charges\",     ending_ar = \"Ending AR\",     ending_ar_target = \"Target AR\",     dar = \"Days in AR\",     dar_pass = \"Pass\",     headline = \"Ending AR Trend\"   ) |>   tab_row_group(label = \"Q4\", rows = c(10:12)) |>   tab_row_group(label = \"Q3\", rows = c(7:9)) |>   tab_row_group(label = \"Q2\", rows = c(4:6)) |>   tab_row_group(label = \"Q1\", rows = c(1:3)) |>   fmt_number(columns = dar) |>   fmt_currency(columns = c(gross_charges, ending_ar, ending_ar_target)) |>   # tab_style(style = cell_text(font = c(   #   google_font(name = \"IBM Plex Mono\"),   #   default_fonts())),   #   locations = cells_body(columns = c(gross_charges, ending_ar, ending_ar_target, dar))) |>   opt_stylize(style = 6, color = \"cyan\") |>   tab_header(     title = md(\"Example **Days in AR Analysis** with the **{forager}** Package\"),     subtitle = md(       \"**May** saw the *highest* Days in AR of 2022 *(51.2)*. This coincided with the largest <br> month-to-month increase in AR & highest percentage over the AR Target *(46%)*.\"     )   ) |>   opt_all_caps() |>   grand_summary_rows(     columns = c(gross_charges, ending_ar, ending_ar_target, dar),     fns = list(       Mean = ~ mean(., na.rm = TRUE),       Median = ~ median(., na.rm = TRUE)     )   ) |>   opt_align_table_header(align = \"left\") dar_month <- avg_dar(   df     = dar_ex(),   date   = date,   gct    = gross_charges,   earb   = ending_ar,   dart   = 35,   by = \"month\" )  # Create df for gt_plt_bar_stack dar_month_pct <- dar_month |>   mutate(gct_pct = (gross_charges / (gross_charges + ending_ar) * 100),          earb_pct = (ending_ar / (gross_charges + ending_ar) * 100)) |>   select(month, gct_pct, earb_pct) |>   pivot_longer(-month, names_to = \"measure\", values_to = \"percentage\") |>   group_by(month) |>   summarize(list_data = list(percentage))  # Right join data frames dar_month_join <- right_join(   dar_month,    dar_month_pct,    by = \"month\")  # Create new copy cols for gt_plt_bullet dar_month_gt <- dar_month_join |>    select(month,          gross_charges,          ending_ar,          ending_ar_target,          dar,          dar_pass,          list_data) |>   mutate(target_col = ending_ar, plot_col = ending_ar_target)  # Create gt table dar_month_gt |>   gt(rowname_col = \"month\") |>   cols_label(     gross_charges = \"Gross Charges\",     ending_ar = \"Ending AR\",     ending_ar_target = \"Optimal AR\",     dar = \"Days in AR\",     dar_pass = \"Pass\",     plot_col = \"Optimal AR Threshold\"   ) |>   tab_row_group(label = \"Q4\", rows = c(10:12)) |>   tab_row_group(label = \"Q3\", rows = c(7:9)) |>   tab_row_group(label = \"Q2\", rows = c(4:6)) |>   tab_row_group(label = \"Q1\", rows = c(1:3)) |>   gt_theme_nytimes() |>   fmt_number(columns = dar) |>   fmt_currency(columns = c(gross_charges, ending_ar, ending_ar_target)) |>   gt_plt_bullet(     column = plot_col,     target = target_col,     palette = c(\"#8ca0aa\", \"black\"),     width = 65   ) |>   gt_plt_bar_stack(     list_data,     width = 50,     labels = c(\"Charges (%) \", \" AR (%)\"),     palette = c(\"#2c3e50\", \"#8ca0aa\")   ) |>   gt_badge(dar_pass, palette = c(\"FALSE\" = \"#8ca0aa\")) |>   tab_style(     style = cell_text(color = \"#2c3e50\", weight = \"bolder\"),     locations = cells_body(columns = dar_pass, rows = dar_pass == \"FALSE\")   ) |>   tab_style(     style = cell_text(color = \"#8ca0aa\", weight = \"normal\"),     locations = cells_body(columns = dar_pass, rows = dar_pass == \"TRUE\")   ) |>   data_color(     columns = c(gross_charges, ending_ar, dar),     colors = col_numeric(       palette = c(\"#2c3e50\", \"#8ca0aa\") |>         as.character(),       domain = NULL     )   ) |>   tab_footnote(footnote = \"Horizontal bar indicates Optimal AR, vertical bar is Actual.\", locations = cells_column_labels(columns = plot_col)) |>   tab_header(title = md(\"Example **Days in AR Analysis** with the **{forager}** Package\")) avg_dar(   df     = dar_ex(),   date   = date,   gct    = gross_charges,   earb   = ending_ar,   dart   = 39,   by = \"quarter\" ) |>    gt(rowname_col = \"nqtr\") |>   cols_hide(c(     date,     nmon,     month,     ndip,     ending_ar_target,     dar_diff,     ratio_ideal,     ratio_actual   )) |>   fmt_currency(     columns = c(       gross_charges,       ending_ar,       adc,       ending_ar_target,       ending_ar_dec_abs,       earb_gct_diff     )   ) |>   fmt_percent(columns = c(ending_ar_dec_pct)) |>   fmt_number(columns = c(dar, dar_diff, ratio_actual, ratio_ideal, ratio_diff)) |>   cols_move_to_start(     c(       nqtr,       gross_charges,       ending_ar,       earb_gct_diff,       adc,       dar_pass,       dar,       dar_diff,       ratio_actual,       ratio_ideal,       ratio_diff,       ending_ar_target,       ending_ar_dec_abs,       ending_ar_dec_pct     )   ) |>   cols_label(     gross_charges = \"Gross Charges\",     ending_ar = \"Ending AR\",     adc = \"ADC\",     dar_pass = \"\",     dar = \"DAR\",     ratio_diff = \"AR/GC Diff\",     ending_ar_dec_abs = \"AR Decrease Needed\",     ending_ar_dec_pct = \"%\",     earb_gct_diff = \"AR - GC\"   ) |>   opt_stylize()"},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"aging-bins","dir":"Articles","previous_headings":"","what":"Aging Bins","title":"Getting started","text":"","code":"binned <- load_ex(\"aging_ex\") |>    select(dos:ins_name) |>    days_between(dos) |>   bin_aging(days_in_ar)  binned #> # A tibble: 2,618 × 5 #>    dos        charges ins_name   days_in_ar aging_bin #>    <date>       <dbl> <chr>           <int> <fct>     #>  1 2023-12-27    390. Medicare          147 121+      #>  2 2023-12-27    173. Patient           147 121+      #>  3 2023-12-27    246. Blue Cross        147 121+      #>  4 2023-12-27    507. AETNA             147 121+      #>  5 2023-12-27    483. Blue Cross        147 121+      #>  6 2023-12-27    399. AETNA             147 121+      #>  7 2023-12-27    850. Patient           147 121+      #>  8 2023-12-27    351. Medicare          147 121+      #>  9 2023-12-27    523. Blue Cross        147 121+      #> 10 2023-12-27    894. Patient           147 121+      #> # ℹ 2,608 more rows binned |>    sorted_bars(ins_name) +   theme_minimal() binned |>   arrange(aging_bin) |>   summarise(n_claims = n(),             balance = sum(charges),             .by = aging_bin) |>   mutate(pct_claims = n_claims / sum(n_claims),          pct_balance = balance / sum(balance)) |>   gt(rowname_col = \"aging_bin\") |>   fmt_percent(columns = pct_claims:pct_balance, decimals = 0) |>   fmt_currency(columns = balance, decimals = 0) |>   fmt_number(columns = n_claims, decimals = 0) |>   opt_stylize() |>   cols_label(n_claims = \"Claims\", balance = \"Charges\") |>   cols_move_to_start(c(n_claims, pct_claims, balance, pct_balance)) |>   cols_merge(c(n_claims, pct_claims), pattern = \"{1} ({2})\") |>   cols_merge(c(balance, pct_balance), pattern = \"{1} ({2})\") |>   tab_header(title = \"Aging Report\", ) |>   tab_options(heading.align = \"left\",               quarto.disable_processing = TRUE) binned |>   arrange(aging_bin, ins_name) |>   summarise(     n_claims = n(),     balance = sum(charges),     .by = c(aging_bin, ins_name)   ) |>   mutate(pct_claims = n_claims / sum(n_claims),          pct_balance = balance / sum(balance)) |>   gt(groupname_col = \"aging_bin\", rowname_col = \"ins_name\") |>   fmt_percent(columns = pct_claims:pct_balance) |>   fmt_currency(columns = balance, decimals = 0) |>   fmt_number(columns = n_claims, decimals = 0) |>   cols_label(n_claims = \"Claims\", balance = \"Charges\") |>   cols_merge(c(n_claims, pct_claims), pattern = \"{1} ({2})\") |>   cols_merge(c(balance, pct_balance), pattern = \"{1} ({2})\") |>   opt_stylize()"},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"nathan-moore-medicare-reimbursement-rate-example","dir":"Articles","previous_headings":"","what":"Nathan Moore Medicare Reimbursement Rate Example","title":"Getting started","text":"","code":"nm_rate <- dplyr::tibble(   payer = c(\"Aetna\", \"BCBS\", \"Cigna\", \"United\", \"Humana\", \"Anthem\", \"Centene\"),   rate = c(1.31, 1.3, 1.1, 1.68, 1.66, 1.55, 1.48),   rvus = c(8100, 6000, 5700, 4000, 1990, 1000, 799),   desc = c(paste0(rate * 100, \"%, \", format(rvus, big.mark = \",\"), \" RVUs\"))   )  ggplot(nm_rate, aes(x = rvus, y = rate)) +   ggforce::geom_mark_circle(aes(fill = payer, label = payer, description = desc)) +   geom_point() +   geom_smooth(method = lm,                formula = y ~ x,                se = FALSE,                color = \"red\",                linetype = \"dashed\",                linewidth = 1.5,               alpha = 0.5) +   scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +   scale_x_continuous(labels = scales::comma) +   ggthemes::theme_fivethirtyeight() +   labs(     title = \"Percentage of Reimbursement Compared to RVU Volume\",     x = \"RVU Volume\",     y = \"Rate as A Pct% of Medicare Reimbursement\") +   theme(legend.position = \"none\")"},{"path":"https://andrewallenbruce.github.io/forager/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/forager/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2024). forager: Healthcare Revenue Cycle Analysis Suite. R package version 0.0.0.9001,  https://andrewallenbruce.github.io/forager/, https://github.com/andrewallenbruce/forager.","code":"@Manual{,   title = {forager: Healthcare Revenue Cycle Analysis Suite},   author = {Andrew Bruce},   year = {2024},   note = {R package version 0.0.0.9001,  https://andrewallenbruce.github.io/forager/},   url = {https://github.com/andrewallenbruce/forager}, }"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"forager-","dir":"","previous_headings":"","what":"Healthcare Revenue Cycle Analysis Suite","title":"Healthcare Revenue Cycle Analysis Suite","text":"Forager (noun) person goes place place searching things can eat use.1 Ager (noun) person calls place place searching payment insurance can refuse.2","code":""},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Healthcare Revenue Cycle Analysis Suite","text":"can install development version forager GitHub :","code":"# install.packages(\"pak\") pak::pak(\"andrewallenbruce/forager\") library(tidyverse) library(clock) library(forager) library(fuimus)"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"foundation-time-measurement","dir":"","previous_headings":"","what":"Foundation: Time Measurement","title":"Healthcare Revenue Cycle Analysis Suite","text":"Everything Healthcare RCM workflow built upon bedrock time measurement. Task created time t. Subtask a1 assigned time t1 responsible party x1. Subtask a2 assigned time t2 responsible party x2. , forth … Task ai completed time ti. Measuring amount time step becomes crucial identifying workflow issues.","code":""},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"example-the-lifecycle-of-a-claim","dir":"","previous_headings":"Foundation: Time Measurement","what":"Example: The Lifecycle of a Claim","title":"Healthcare Revenue Cycle Analysis Suite","text":"Provider Lag: Days Date Service Date Release Billing Lag: Days Date Release Date Submission Acceptance Lag: Days Date Submission Date Acceptance Payment Lag: Days Date Acceptance Date Adjudication Days AR: Days Date Release Date Adjudication","code":"x <- forager::generate_data(1500)  mean(x$days_in_ar, na.rm = TRUE) #> [1] 101.8013 x_pvt <- x |>    select(clm_id:date_recon) |>    pivot_longer(     cols      = starts_with(\"date\"),      names_to  = \"date_type\",      values_to = \"date\") |>    mutate(date_lag = lead(date) - date,          date_lag = lag(date_lag, order_by = date),          date_type = str_remove_all(date_type, \"date_\"),          date_type = case_match(            date_type,            \"srvc\" ~ \"Service\",            \"rlse\" ~ \"Release\",            \"submit\" ~ \"Submission\",            \"accept\" ~ \"Acceptance\",            \"adjud\" ~ \"Adjudication\",            \"recon\" ~ \"Reconciliation\"),          date_type = fct_relevel(            date_type,             \"Service\",             \"Release\",             \"Submission\",             \"Acceptance\",             \"Adjudication\",             \"Reconciliation\"),           .by = clm_id)  x_pvt #> # A tibble: 9,000 × 7 #>    clm_id payer  charges balance date_type      date       date_lag #>    <fct>  <fct>    <dbl>   <dbl> <fct>          <date>     <drtn>   #>  1 0030   Cigna     107.    107. Service        2023-05-21 NA days  #>  2 0030   Cigna     107.    107. Release        2023-06-06 16 days  #>  3 0030   Cigna     107.    107. Submission     2023-06-10  4 days  #>  4 0030   Cigna     107.    107. Acceptance     2023-06-22 12 days  #>  5 0030   Cigna     107.    107. Adjudication   2023-09-02 72 days  #>  6 0030   Cigna     107.    107. Reconciliation NA         NA days  #>  7 0046   Anthem    181.    181. Service        2023-05-21 NA days  #>  8 0046   Anthem    181.    181. Release        2023-05-24  3 days  #>  9 0046   Anthem    181.    181. Submission     2023-05-28  4 days  #> 10 0046   Anthem    181.    181. Acceptance     2023-06-15 18 days  #> # ℹ 8,990 more rows x |>    group_by(     year  = get_year(date_srvc),     month = date_month_factor(date_srvc)) |>    summarise(     n_claims    = n(),      balance     = sum(balance, na.rm = TRUE),     days_rlse   = mean(days_rlse, na.rm = TRUE),      days_submit = mean(days_submit, na.rm = TRUE),     days_accept = mean(days_accept, na.rm = TRUE),     days_adjud  = mean(days_adjud, na.rm = TRUE),     days_recon  = mean(days_recon, na.rm = TRUE),     days_in_ar  = mean(days_in_ar, na.rm = TRUE),      .groups = \"drop\") #> # A tibble: 12 × 10 #>     year month     n_claims balance days_rlse days_submit days_accept days_adjud #>    <int> <ord>        <int>   <dbl>     <dbl>       <dbl>       <dbl>      <dbl> #>  1  2022 June           120      0       8.06        3.06        12.8       74.0 #>  2  2022 July           136      0       8.77        3.12        12.5       73.3 #>  3  2022 August         127      0       8.08        2.96        13.0       75.2 #>  4  2022 September      131      0       8.07        3.11        13         73.5 #>  5  2022 October        124      0       7.60        2.75        12.6       74.5 #>  6  2022 November       114      0       7.86        3.07        11.9       71.7 #>  7  2022 December       142      0       7.84        3.04        12.2       77.0 #>  8  2023 January        124  10815.      7.78        2.63        12.4       73.7 #>  9  2023 February       122  12522.      7.98        2.99        12.5       77.1 #> 10  2023 March          139  13533.      7.90        2.78        11.8       74.2 #> 11  2023 April          123  14256.      7.98        2.98        12.9       76.8 #> 12  2023 May             98  10116.      8.33        3.03        12.2       72.3 #> # ℹ 2 more variables: days_recon <dbl>, days_in_ar <dbl> x |>    group_by(     year  = get_year(date_srvc),     nqtr = quarter(date_srvc)) |>    summarise(     n_claims    = n(),      balance     = sum(balance, na.rm = TRUE),     days_rlse   = mean(days_rlse, na.rm = TRUE),      days_submit = mean(days_submit, na.rm = TRUE),     days_accept = mean(days_accept, na.rm = TRUE),     days_adjud  = mean(days_adjud, na.rm = TRUE),     days_recon  = mean(days_recon, na.rm = TRUE),     days_in_ar  = mean(days_in_ar, na.rm = TRUE),      .groups = \"drop\") #> # A tibble: 5 × 10 #>    year  nqtr n_claims balance days_rlse days_submit days_accept days_adjud #>   <int> <int>    <int>   <dbl>     <dbl>       <dbl>       <dbl>      <dbl> #> 1  2022     2      120      0       8.06        3.06        12.8       74.0 #> 2  2022     3      394      0       8.31        3.07        12.8       74.0 #> 3  2022     4      380      0       7.77        2.96        12.2       74.6 #> 4  2023     1      385  36869.      7.89        2.80        12.2       74.9 #> 5  2023     2      221  24373.      8.13        3.00        12.6       74.8 #> # ℹ 2 more variables: days_recon <dbl>, days_in_ar <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"aging-calculation","dir":"","previous_headings":"","what":"Aging Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"x |>    bin_aging(days_in_ar, bin_type = \"chop\") |>    group_by(aging_bin) |>    summarise(     n_claims = n(),     balance = roundup(sum(balance, na.rm = TRUE)),      .groups = \"drop\") #> # A tibble: 5 × 3 #>   aging_bin  n_claims balance #>   <fct>         <int>   <dbl> #> 1 (30, 60]        124   5934. #> 2 (60, 90]        453  20147. #> 3 (90, 120]       492  19992. #> 4 (120, 150]      345  13099. #> 5 (150, 180]       86   2070. x |>    bin_aging(days_in_ar, bin_type = \"case\") |>    group_by(aging_bin) |>    summarise(     n_claims = n(),     balance = roundup(sum(balance, na.rm = TRUE)),      .groups = \"drop\") #> # A tibble: 4 × 3 #>   aging_bin n_claims balance #>   <fct>        <int>   <dbl> #> 1 31-60          124   5934. #> 2 61-90          453  20147. #> 3 91-120         492  19992. #> 4 121+           431  15169."},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"days-in-ar-monthly-calculation","dir":"","previous_headings":"","what":"Days in AR Monthly Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"tibble(   date = date_build(2024, 1:12),   gct  = rpois(12, 250000:400000),   earb = rpois(12, 290000:400000)   ) |>    avg_dar(     date,      gct,      earb,      dart = 35,     by = \"month\") #> # A tibble: 12 × 27 #>    date          gct   earb  nmon mon   month      nqtr  yqtr dqtr   year  ymon #>    <date>      <int>  <int> <dbl> <ord> <ord>     <int> <dbl> <chr> <dbl> <dbl> #>  1 2024-01-01 249971 290387     1 Jan   January       1 2024. 1Q24   2024 2024. #>  2 2024-02-01 249609 289524     2 Feb   February      1 2024. 1Q24   2024 2024. #>  3 2024-03-01 250604 290556     3 Mar   March         1 2024. 1Q24   2024 2024. #>  4 2024-04-01 249649 290402     4 Apr   April         2 2024. 2Q24   2024 2024. #>  5 2024-05-01 250781 290856     5 May   May           2 2024. 2Q24   2024 2024. #>  6 2024-06-01 250043 290617     6 Jun   June          2 2024. 2Q24   2024 2024. #>  7 2024-07-01 249686 289370     7 Jul   July          3 2024. 3Q24   2024 2024. #>  8 2024-08-01 250669 289316     8 Aug   August        3 2024. 3Q24   2024 2024. #>  9 2024-09-01 249563 290971     9 Sep   September     3 2024. 3Q24   2024 2024. #> 10 2024-10-01 249992 290669    10 Oct   October       4 2024. 4Q24   2024 2024. #> 11 2024-11-01 249929 289751    11 Nov   November      4 2024. 4Q24   2024 2024. #> 12 2024-12-01 250540 289247    12 Dec   December      4 2024. 4Q24   2024 2024. #> # ℹ 16 more variables: myear <chr>, nhalf <int>, yhalf <dbl>, dhalf <chr>, #> #   ndip <int>, adc <dbl>, dar <dbl>, dar_pass <lgl>, dar_diff <dbl>, #> #   ratio_actual <dbl>, ratio_ideal <dbl>, ratio_diff <dbl>, earb_target <dbl>, #> #   earb_dec_abs <dbl>, earb_dec_pct <dbl>, earb_gct_diff <int>"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"days-in-ar-quarterly-calculation","dir":"","previous_headings":"","what":"Days in AR Quarterly Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"tibble(   date = date_build(2024, 1:12),   gct  = rpois(12, 250000:400000),   earb = rpois(12, 285500:400000)   ) |>    avg_dar(     date,      gct,      earb,      dart = 35,     by = \"quarter\") #> # A tibble: 4 × 18 #>   date         earb  nmon  nqtr month    gct  ndip   adc   dar dar_pass dar_diff #>   <date>      <int> <dbl> <int> <ord>  <int> <int> <dbl> <dbl> <lgl>       <dbl> #> 1 2024-03-01 285101     3     1 March 748742    91 8228.  34.7 TRUE      -0.350  #> 2 2024-06-01 285522     6     2 June  750220    91 8244.  34.6 TRUE      -0.367  #> 3 2024-09-01 285733     9     3 Sept… 749819    92 8150.  35.1 FALSE      0.0584 #> 4 2024-12-01 284571    12     4 Dece… 750898    92 8162.  34.9 TRUE      -0.134  #> # ℹ 7 more variables: ratio_actual <dbl>, ratio_ideal <dbl>, ratio_diff <dbl>, #> #   earb_target <dbl>, earb_dec_abs <dbl>, earb_dec_pct <dbl>, #> #   earb_gct_diff <int>"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Healthcare Revenue Cycle Analysis Suite","text":"Please note forager project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Average Days in AR — avg_dar","title":"Calculate Average Days in AR — avg_dar","text":"Calculate Average Days AR","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Average Days in AR — avg_dar","text":"","code":"avg_dar(df, date, gct, earb, dart = 35, by = c(\"month\", \"quarter\"))"},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Average Days in AR — avg_dar","text":"df <data.frame> <tibble> date column <date>s gct <dbl> column total Gross Charges earb <dbl> column ending accounts receivable balances dart [numeric] Target Days AR, default 35 days [character] string specifying calculation period; one \"month\", \"quarter\", \"year\"; defaults \"month\"","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Average Days in AR — avg_dar","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Average Days in AR — avg_dar","text":"","code":"avg_dar(df     = dar_ex(),         date   = date,         gct    = gross_charges,         earb   = ending_ar,         dart   = 35,         by = \"month\") #> # A tibble: 12 × 27 #>    date       gross_charges ending_ar  nmon mon   month   nqtr  yqtr dqtr   year #>    <date>             <dbl>     <dbl> <dbl> <ord> <ord>  <int> <dbl> <chr> <dbl> #>  1 2024-01-01       325982.   288433.     1 Jan   Janua…     1 2024. 1Q24   2024 #>  2 2024-02-01       297732.   307871.     2 Feb   Febru…     1 2024. 1Q24   2024 #>  3 2024-03-01       198655.   253977.     3 Mar   March      1 2024. 1Q24   2024 #>  4 2024-04-01       186048.   183685.     4 Apr   April      2 2024. 2Q24   2024 #>  5 2024-05-01       123654.   204228.     5 May   May        2 2024. 2Q24   2024 #>  6 2024-06-01       131440.   203460.     6 Jun   June       2 2024. 2Q24   2024 #>  7 2024-07-01       153992.   182771.     7 Jul   July       3 2024. 3Q24   2024 #>  8 2024-08-01       156976.   169634.     8 Aug   August     3 2024. 3Q24   2024 #>  9 2024-09-01       146878.   179348.     9 Sep   Septe…     3 2024. 3Q24   2024 #> 10 2024-10-01       163799.   178051.    10 Oct   Octob…     4 2024. 4Q24   2024 #> 11 2024-11-01       151411.   162757.    11 Nov   Novem…     4 2024. 4Q24   2024 #> 12 2024-12-01       169094.   199849.    12 Dec   Decem…     4 2024. 4Q24   2024 #> # ℹ 17 more variables: ymon <dbl>, myear <chr>, nhalf <int>, yhalf <dbl>, #> #   dhalf <chr>, ndip <int>, adc <dbl>, dar <dbl>, dar_pass <lgl>, #> #   dar_diff <dbl>, ratio_actual <dbl>, ratio_ideal <dbl>, ratio_diff <dbl>, #> #   ending_ar_target <dbl>, ending_ar_dec_abs <dbl>, ending_ar_dec_pct <dbl>, #> #   earb_gct_diff <dbl>  avg_dar(df     = dar_ex(),         date   = date,         gct    = gross_charges,         earb   = ending_ar,         dart   = 35,         by = \"quarter\") #> # A tibble: 4 × 18 #>   date       ending_ar  nmon  nqtr month     gross_charges  ndip   adc   dar #>   <date>         <dbl> <dbl> <int> <ord>             <dbl> <int> <dbl> <dbl> #> 1 2024-03-01   253977.     3     1 March           822369.    91 9037.  28.1 #> 2 2024-06-01   203460.     6     2 June            441142.    91 4848.  42.0 #> 3 2024-09-01   179348.     9     3 September       457846.    92 4977.  36.0 #> 4 2024-12-01   199849.    12     4 December        484305.    92 5264.  38.0 #> # ℹ 9 more variables: dar_pass <lgl>, dar_diff <dbl>, ratio_actual <dbl>, #> #   ratio_ideal <dbl>, ratio_diff <dbl>, ending_ar_target <dbl>, #> #   ending_ar_dec_abs <dbl>, ending_ar_dec_pct <dbl>, earb_gct_diff <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply 30-Day Aging Bins — bin_aging","title":"Apply 30-Day Aging Bins — bin_aging","text":"Apply 30-Day Aging Bins","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply 30-Day Aging Bins — bin_aging","text":"","code":"bin_aging(df, ndays, bin_type = c(\"case\", \"chop\"))"},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply 30-Day Aging Bins — bin_aging","text":"df <data.frame> <tibble> ndays <dbl> column counts days elapsed bin bin_type <chr> string specifying bin type; one \"chop\", \"cut\" \"ivs\"","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply 30-Day Aging Bins — bin_aging","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply 30-Day Aging Bins — bin_aging","text":"","code":"generate_data(10)[c(   \"date_srvc\",   \"charges\",   \"payer\")] |>   days_between(date_srvc) |>   bin_aging(days_in_ar) #> # A tibble: 10 × 5 #>    date_srvc  charges payer         days_in_ar aging_bin #>    <date>       <dbl> <fct>              <int> <fct>     #>  1 2023-05-22    11.2 BCBS                 366 121+      #>  2 2023-05-22   278.  Medicaid             366 121+      #>  3 2023-05-22   385.  Anthem               366 121+      #>  4 2023-04-22    42.3 United Health        396 121+      #>  5 2023-04-22   132.  BCBS                 396 121+      #>  6 2023-03-22    21.8 Cigna                427 121+      #>  7 2023-02-22   144.  Centene              455 121+      #>  8 2022-12-22    95.8 United Health        517 121+      #>  9 2022-12-22    46.3 Anthem               517 121+      #> 10 2022-10-22    47.9 BCBS                 578 121+       load_ex(\"aging_ex\") |>   dplyr::select(dos, charges, ins_name) |>   days_between(dos) |>   bin_aging(days_in_ar) |>   dplyr::arrange(aging_bin) |>   dplyr::group_by(     year = clock::get_year(dos),     month = clock::date_month_factor(dos),   ) |>   janitor::tabyl(ins_name, aging_bin, year) #> $`2023` #>    ins_name 0-30 31-60 61-90 91-120 121+ #>       AETNA    0     0     0      0    6 #>  Blue Cross    0     0     0      0   13 #>       CIGNA    0     0     0      0    6 #>    Coventry    0     0     0      0    0 #>    Medicare    0     0     0      0    9 #>     Patient    0     0     0      0   24 #>  #> $`2024` #>    ins_name 0-30 31-60 61-90 91-120 121+ #>       AETNA   84    32    52     55   25 #>  Blue Cross  210    86    88     73   65 #>       CIGNA  116    37    49     34   37 #>    Coventry   11     4     8      6    1 #>    Medicare  192    70    81     88   57 #>     Patient  404   153   169    173  100 #>"},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Days in AR Example Data — dar_ex","title":"Days in AR Example Data — dar_ex","text":"Days AR Example Data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Days in AR Example Data — dar_ex","text":"","code":"dar_ex()"},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Number of Days Between Two Dates — days_between","title":"Calculate Number of Days Between Two Dates — days_between","text":"Calculate Number Days Two Dates","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Number of Days Between Two Dates — days_between","text":"","code":"days_between(df, from, to = NULL)"},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Number of Days Between Two Dates — days_between","text":"df <data.frame> <tibble> [character] column dates calculate days [character] column dates calculate days ","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Number of Days Between Two Dates — days_between","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Number of Days Between Two Dates — days_between","text":"","code":"generate_data(10)[c(   \"date_srvc\",   \"charges\",   \"payer\")] |>   days_between(date_srvc) #> # A tibble: 10 × 4 #>    date_srvc  charges payer         days_in_ar #>    <date>       <dbl> <fct>              <int> #>  1 2023-05-22    52.9 United Health        366 #>  2 2023-04-22   170.  Humana               396 #>  3 2023-02-22   234.  BCBS                 455 #>  4 2023-01-22    50.4 Medicaid             486 #>  5 2022-12-22    91.2 Cigna                517 #>  6 2022-12-22    60.2 Humana               517 #>  7 2022-10-22   156.  United Health        578 #>  8 2022-08-22   147.  Medicare             639 #>  9 2022-06-22   319.  Medicaid             700 #> 10 2022-06-22   151.  Cigna                700"},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mock coding/billing data frame — generate_data","title":"Generate mock coding/billing data frame — generate_data","text":"Generate mock coding/billing data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mock coding/billing data frame — generate_data","text":"","code":"generate_data(rows = 100, add_day_counts = TRUE, ...)"},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mock coding/billing data frame — generate_data","text":"rows [integerish] rows number rows generate; default 100 add_day_counts [logical] add_day_counts add columns days events; default TRUE ... [dots] additional arguments","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate mock coding/billing data frame — generate_data","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/generate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate mock coding/billing data frame — generate_data","text":"","code":"generate_data(rows = 5) #> # A tibble: 5 × 16 #>   clm_id payer    charges balance date_srvc  date_rlse  date_submit date_accept #>   <fct>  <fct>      <dbl>   <dbl> <date>     <date>     <date>      <date>      #> 1 5      BCBS       134.     134. 2023-04-22 2023-04-29 2023-05-01  2023-05-15  #> 2 2      Cigna       78.2      0  2023-02-22 2023-02-23 2023-02-27  2023-03-04  #> 3 3      Medicare   141.       0  2022-12-22 2022-12-26 2022-12-26  2022-12-29  #> 4 1      Medicare   110.       0  2022-07-22 2022-07-25 2022-07-26  2022-08-01  #> 5 4      Centene     42.4      0  2022-06-22 2022-06-28 2022-06-30  2022-07-05  #> # ℹ 8 more variables: date_adjud <date>, date_recon <date>, days_rlse <int>, #> #   days_submit <int>, days_accept <int>, days_adjud <int>, days_recon <int>, #> #   days_in_ar <int>"},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Load example data — load_ex","title":"Load example data — load_ex","text":"Load example data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load example data — load_ex","text":"","code":"load_ex(name)"},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load example data — load_ex","text":"name [character] name example dataset","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load example data — load_ex","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/net_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Net Prediction Example Data — net_ex","title":"Net Prediction Example Data — net_ex","text":"Net Prediction Example Data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/net_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Net Prediction Example Data — net_ex","text":"","code":"net_ex()"},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Lirov's Net Payment Estimation — predict_net","title":"Lirov's Net Payment Estimation — predict_net","text":"Lirov's Net Payment Estimation","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lirov's Net Payment Estimation — predict_net","text":"","code":"predict_net(df, date, gct, earb, net, parb_120)"},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lirov's Net Payment Estimation — predict_net","text":"df <data.frame> <tibble> date column <date>s gct <dbl> column total Gross Charges earb <dbl> column ending accounts receivable balances net column net payments parb_120 column percentage AR beyond 120 days old","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lirov's Net Payment Estimation — predict_net","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lirov's Net Payment Estimation — predict_net","text":"","code":"predict_net(   net_ex(),   date,   gct,   earb,   net,   parb_120) #> # A tibble: 13 × 11 #>    date           gct    earb earb_lt120 earb_gt120 parl_120 parb_120 pct_paid #>    <date>       <dbl>   <dbl>      <dbl>      <dbl>    <dbl>    <dbl>    <dbl> #>  1 2024-01-01 325982  288433.    282375.      6057.    0.979    0.021    0.320 #>  2 2024-02-01 297732. 307871.    293401.     14470.    0.953    0.047    0.418 #>  3 2024-03-01 198655. 253977.    234928.     19048.    0.925    0.075    0.601 #>  4 2024-04-01 186047  183685.    179828.      3857.    0.979    0.021    0.386 #>  5 2024-05-01 123654  204228.    194629.      9599.    0.953    0.047    0.405 #>  6 2024-06-01 131440. 203460.    188201.     15260.    0.925    0.075    0.500 #>  7 2024-07-01 153991  182771.    178933.      3838.    0.979    0.021    0.554 #>  8 2024-08-01 156975  169634.    161661.      7973.    0.953    0.047    0.434 #>  9 2024-09-01 146878. 179348.    165897.     13451.    0.925    0.075    0.502 #> 10 2024-10-01 163799. 178051.    174312.      3739.    0.979    0.021    0.497 #> 11 2024-11-01 151411. 162757.    155108.      7650.    0.953    0.047    0.518 #> 12 2024-12-01 169094. 199849.    184861.     14989.    0.925    0.075    0.408 #> 13 2025-01-01     NA      NA         NA         NA    NA       NA       NA     #> # ℹ 3 more variables: net <dbl>, net_pred <dbl>, net_diff <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/reference/sorted_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorted Bar Chart — sorted_bars","title":"Sorted Bar Chart — sorted_bars","text":"Sorted Bar Chart","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/sorted_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorted Bar Chart — sorted_bars","text":"","code":"sorted_bars(df, var)"},{"path":"https://andrewallenbruce.github.io/forager/reference/sorted_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorted Bar Chart — sorted_bars","text":"df data frame var column plot","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/sorted_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorted Bar Chart — sorted_bars","text":"ggplot2 object","code":""},{"path":"https://andrewallenbruce.github.io/forager/news/index.html","id":"forager-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"forager 0.0.0.9001 (2022-08-31)","title":"forager 0.0.0.9001 (2022-08-31)","text":"Added gt table examples","code":""}]

[{"path":[]},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/forager/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/forager/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/aging-of_accounts.html","id":"patient-liability","dir":"Articles","previous_headings":"","what":"Patient Liability","title":"Aging of Accounts","text":"Patient liability ratio patient responsibility total billed charges, roughly reflects patient deductibles. metric important measuring front office function little clean claim submission effective follow-.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/aging-of_accounts.html","id":"first-pass-pay-fpp-rate-and-denial-rate","dir":"Articles","previous_headings":"","what":"First-Pass Pay (FPP) Rate and Denial Rate","title":"Aging of Accounts","text":"FPP Rate percentage claims paid full upon first submission (subject federal state timely payment regulations; state laws require 15 days electronic submission 30 days paper submission.) denial rate complementary metric FPP rate. counts percentage claims require follow-therefore cost process. Follow-may take form phone call payer discover lost claim, receive interpretation denial message, correct earlier submitted data, resubmit original claim, consult provider medical note, denial appeal. FPP denial rates important metrics often used billing process improvement. upside FPP/denial metric ’s affected charge, downside hides differences process imperfections claim submission claim payment sides. identify patterns problem CPT codes payers, FPP/Denial metric needs computed compared across payer-CPT code pairs.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"days-in-accounts-receivable","dir":"Articles","previous_headings":"","what":"Days in Accounts Receivable","title":"DAR Formulas","text":"Days Accounts Receivable mathematical formula calculates average number days takes business collect money owed. DAR number low. high DAR number tells problem revenue cycle. Days Accounts Receivable (also known Days AR simply DAR) common financial metric belonging group ratios called efficiency ratios. calculation measures average amount time takes business collect money owed responsible party services rendered billed. name implies, unit measurement employed particular metric days, rather average number days moment physician provides service patient guarantor pays service. number can tell much financial health business. Days Accounts Receivable (DAR) growing number days AR symptomatic faulty billing process. One way determine DAR count days date service date payment every claim, average across claims. simpler way compute average days AR taking ratio AR average daily charges, Days AR = (Accounts Receivable / Average Charge) x 365 metric also depends medical specialty, patient demographics, payer mix, CPT sample. Another downside metric sensitive provider counts lag time unsubmitted claims services already delivered. lag time roughly averages across payers, making DAR effective comparison metric payers individual provider, invalidating across multiple providers. One obvious advantage DAR metric independence charges. averaging feature eliminates sensitivity specific day CPT, also hides behavior shape AR curve. formula calculating \\(dar\\) : \\({dar} = \\dfrac {earb} {{gct} \\div {ndip}}\\)  : ${ndip} = $ Number Days Period ${gct} = $ Total Gross Charges ${earb} = $ Ending AR Balance","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"number-of-days-in-the-period","dir":"Articles","previous_headings":"Days in Accounts Receivable","what":"Number of Days in the Period","title":"DAR Formulas","text":"number days within period measuring Days AR. DAR typically measured monthly quarterly increments, number usually hover around 30, 60, 90, etc.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"total-gross-charges","dir":"Articles","previous_headings":"Days in Accounts Receivable","what":"Total Gross Charges","title":"DAR Formulas","text":"Gross charges, full fee schedule charges1, charges generated practice, regardless actual reimbursement. Gross Charges figure total dollar amount charged Number Days Period measuring. Whether billed insurance claim self-pay patient, charges period included .","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"ending-ar-balance","dir":"Articles","previous_headings":"Days in Accounts Receivable","what":"Ending AR Balance","title":"DAR Formulas","text":"Accounts Receivables balance close business (COB) final day Period measuring. figure total amount money owed practice patients, insurance companies, entities services rendered.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"example-calculation","dir":"Articles","previous_headings":"Days in Accounts Receivable","what":"Example Calculation","title":"DAR Formulas","text":"Let’s say following data: Number Days Period = 30 Total Gross Charges = $180,000 Ending AR Balance = $77,400 calculation look like : \\(\\dfrac {77,400} {180,000 \\div 30} = 12.9\\) , R:","code":"dar <- function(earb, gct, ndip) {   earb / (gct / ndip) }  dar(earb = 77400,      gct  = 180000,      ndip = 30) #> [1] 12.9"},{"path":"https://andrewallenbruce.github.io/forager/articles/dar-formulas.html","id":"dar-targets","dir":"Articles","previous_headings":"","what":"DAR Targets","title":"DAR Formulas","text":"\\(earb_t = (dar_t \\times gct) \\div ndip\\) \\(gct_t = (earb \\times ndip) \\div dar_t\\) \\(ndip_t = (dar_t \\times gct) \\div earb\\) \\(dar_t = (earb \\times ndip) \\div gct\\)","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"Date Service (DOS) Date Reconciliation critical metric Revenue Cycle Management. time takes process claim can significant impact cash flow. vignette demonstrates calculate average days accounts receivable (AR) medical practice.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Getting started","text":"Date Service: date patient receives medical services. Date Release: date claim released billing. Date Submission: date claim submitted payer. Date Acceptance: date claim accepted payer. Date Adjudication: date claim adjudicated payer. Date Reconciliation: date claim reconciled medical practice.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"the-lifecycle-of-a-claim","dir":"Articles","previous_headings":"","what":"The Lifecycle of a Claim","title":"Getting started","text":"Provider Lag: Date Service - Date Release Billing Lag: Date Release - Date Submission Acceptance Lag: Date Submission - Date Acceptance Payment Lag: Date Acceptance - Date Adjudication Days AR: Date Release - Date Adjudication","code":"# Balances, when zero, add net payment and adjustments # Payment and adjustments should be a percentage of the balance, equal to one (x <- mock_claims(15000)) #> # A tibble: 15,000 × 10 #>    claimid payer     charges balance date_ser…¹ date_rel…² date_sub…³ date_acc…⁴ #>    <chr>   <fct>       <dbl>   <dbl> <date>     <date>     <date>     <date>     #>  1 00064   UnitedHe…    277.      0  2024-05-27 2024-05-29 2024-06-01 2024-06-12 #>  2 00102   Oscar         55.      0  2024-05-27 2024-06-06 2024-06-06 2024-06-25 #>  3 00134   Medicaid      61.     61. 2024-05-27 2024-06-07 2024-06-13 2024-06-20 #>  4 00242   American     200.      0  2024-05-27 2024-05-29 2024-05-30 2024-06-05 #>  5 00337   Allianz      199.      0  2024-05-27 2024-06-09 2024-06-12 2024-06-18 #>  6 00395   Molina       124.    124. 2024-05-27 2024-06-06 2024-06-10 2024-06-16 #>  7 00449   Oscar        396.      0  2024-05-27 2024-06-24 2024-06-28 2024-07-09 #>  8 00484   Molina       182.    182. 2024-05-27 2024-06-01 2024-06-07 2024-06-23 #>  9 00487   GuideWell     75.      0  2024-05-27 2024-05-31 2024-06-04 2024-06-08 #> 10 00580   Athene       237.    237. 2024-05-27 2024-06-04 2024-06-09 2024-06-14 #> # ℹ 14,990 more rows #> # ℹ abbreviated names: ¹​date_service, ²​date_release, ³​date_submission, #> #   ⁴​date_acceptance #> # ℹ 2 more variables: date_adjudication <date>, date_reconciliation <date> (x <- prep_claims(x)) #> # A tibble: 15,000 × 13 #>    claimid payer           charges balance date_ser…¹ aging_bin   dar days_rel…² #>    <chr>   <fct>             <dbl>   <dbl> <date>     <fct>     <dbl>      <dbl> #>  1 00001   Univ. Healthca…   467.      0   2024-04-11 0-30         24          1 #>  2 00002   BCBS WY           263.    263.  2024-04-21 0-30         26          3 #>  3 00003   Humana             30.     30.  2024-05-04 0-30         22          1 #>  4 00004   Medicare            7.5     7.5 2024-04-30 0-30         23          2 #>  5 00005   American           83.      0   2024-05-24 31-60        36          3 #>  6 00006   Mass Mutual       186.    186.  2024-05-09 0-30         28          5 #>  7 00007   HCSC              177.    177.  2024-03-04 0-30         30          7 #>  8 00008   Mass Mutual       118.    118.  2024-03-15 31-60        34          6 #>  9 00009   Wellcare           55.     55.  2024-03-16 31-60        44         13 #> 10 00010   New York Life     132.      0   2024-04-11 31-60        36          7 #> # ℹ 14,990 more rows #> # ℹ abbreviated names: ¹​date_service, ²​days_release #> # ℹ 5 more variables: days_submission <dbl>, days_acceptance <dbl>, #> #   days_adjudication <dbl>, days_reconciliation <dbl>, dates <list> summarise_claims(x) |>    glimpse() #> Rows: 1 #> Columns: 9 #> $ n_claims            <int> 15000 #> $ gross_charges       <dbl> 1996234 #> $ ending_ar           <dbl> 1319105 #> $ mean_release        <dbl> 8.007933 #> $ mean_submission     <dbl> 2.992733 #> $ mean_acceptance     <dbl> 7.5078 #> $ mean_adjudication   <dbl> 15.01487 #> $ mean_reconciliation <dbl> 2.214623 #> $ mean_dar            <dbl> 34.27453 x |>    group_by(     year = year(date_service),     month = month(date_service)     ) |>   summarise_claims() #> # A tibble: 3 × 11 #>    year month n_claims gross_charges ending_ar mean_rele…¹ mean_sub…² mean_acc…³ #>   <int> <int>    <int>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl> #> 1  2024     3     5095       682105.   447934.         8.0        3.0        7.5 #> 2  2024     4     5193       689605.   460074.         8.0        3.0        7.6 #> 3  2024     5     4712       624523.   411096.         7.9        3.0        7.5 #> # ℹ abbreviated names: ¹​mean_release, ²​mean_submission, ³​mean_acceptance #> # ℹ 3 more variables: mean_adjudication <dbl>, mean_reconciliation <dbl>, #> #   mean_dar <dbl> x |>    group_by(     year = year(date_service),     quarter = quarter(date_service)     ) |>   summarise_claims() #> # A tibble: 2 × 11 #>    year quarter n_claims gross_char…¹ ending_ar mean_rel…² mean_sub…³ mean_acc…⁴ #>   <int>   <int>    <int>        <dbl>     <dbl>      <dbl>      <dbl>      <dbl> #> 1  2024       1     5095      682105.   447934.        8.0        3.0        7.5 #> 2  2024       2     9905     1314128.   871171.        8.0        3.0        7.5 #> # ℹ abbreviated names: ¹​gross_charges, ²​mean_release, ³​mean_submission, #> #   ⁴​mean_acceptance #> # ℹ 3 more variables: mean_adjudication <dbl>, mean_reconciliation <dbl>, #> #   mean_dar <dbl> x |>    group_by(     year = year(date_service),     month = month(date_service),     aging_bin     ) |>   summarise_claims() #> # A tibble: 9 × 12 #>    year month aging_bin n_claims gross_charges ending_ar mean_release mean_sub…¹ #>   <int> <int> <fct>        <int>         <dbl>     <dbl>        <dbl>      <dbl> #> 1  2024     3 0-30          1769       233852.   156661.          4.5        2.2 #> 2  2024     3 31-60         3308       446504.   290539.          9.9        3.5 #> 3  2024     3 61-90           18         1749.      735.         20.         5.7 #> 4  2024     4 0-30          1787       232863.   157269.          4.5        2.1 #> 5  2024     4 31-60         3396       455635.   302350.          9.9        3.4 #> 6  2024     4 61-90           10         1108.      456.         16          5.6 #> 7  2024     5 0-30          1653       217796.   149252.          4.3        2.1 #> 8  2024     5 31-60         3036       403461.   260696.          9.8        3.4 #> 9  2024     5 61-90           23         3266.     1149.         19          5.6 #> # ℹ abbreviated name: ¹​mean_submission #> # ℹ 4 more variables: mean_acceptance <dbl>, mean_adjudication <dbl>, #> #   mean_reconciliation <dbl>, mean_dar <dbl> x |>    group_by(     year = year(date_service),     quarter = quarter(date_service),     payer     ) |>   summarise_claims() #> # A tibble: 54 × 12 #>     year quarter payer       n_claims gross_ch…¹ ending_ar mean_rel…² mean_sub…³ #>    <int>   <int> <fct>          <int>      <dbl>     <dbl>      <dbl>      <dbl> #>  1  2024       1 Univ. Heal…      171     24799.    15516.        8.2        3.0 #>  2  2024       1 BCBS WY          181     24340.    17057.        8.1        3.3 #>  3  2024       1 Humana           214     28280.    17415.        8.0        2.9 #>  4  2024       1 Medicare         164     23249.    15307.        7.5        3.1 #>  5  2024       1 American         179     22939.    15536.        8.3        3.2 #>  6  2024       1 Mass Mutual      192     25032.    17145.        7.8        3.1 #>  7  2024       1 HCSC             210     27982.    19153.        8.2        2.9 #>  8  2024       1 Wellcare         192     25934.    15478.        8.0        3.0 #>  9  2024       1 New York L…      181     25024.    16390.        7.7        2.8 #> 10  2024       1 Allianz          194     29095.    18838.        8.2        2.9 #> # ℹ 44 more rows #> # ℹ abbreviated names: ¹​gross_charges, ²​mean_release, ³​mean_submission #> # ℹ 4 more variables: mean_acceptance <dbl>, mean_adjudication <dbl>, #> #   mean_reconciliation <dbl>, mean_dar <dbl>"},{"path":[]},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"monthly-calculation","dir":"Articles","previous_headings":"Average Days in AR","what":"Monthly Calculation","title":"Getting started","text":"","code":"tibble(   date = date_build(2024, 1:12),   gct  = rpois(12, 250000:400000),   earb = rpois(12, 290000:400000)   ) |>    avg_dar(     date,      gct,      earb,      dart = 35,     by = \"month\") #> # A tibble: 12 × 15 #>    date         gct  earb  ndip   adc  dart   dar dar_pass ratio_id…¹ ratio_ac…² #>    <date>     <int> <int> <int> <dbl> <dbl> <dbl> <lgl>         <dbl>      <dbl> #>  1 2024-01-01 2.5e5 2.9e5    31 8066.    35   36. FALSE           1.1        1.2 #>  2 2024-02-01 2.5e5 2.9e5    29 8606.    35   34. TRUE            1.2        1.2 #>  3 2024-03-01 2.5e5 2.9e5    31 8050.    35   36. FALSE           1.1        1.2 #>  4 2024-04-01 2.5e5 2.9e5    30 8349.    35   35. TRUE            1.2        1.2 #>  5 2024-05-01 2.5e5 2.9e5    31 8054.    35   36. FALSE           1.1        1.2 #>  6 2024-06-01 2.5e5 2.9e5    30 8336.    35   35. TRUE            1.2        1.2 #>  7 2024-07-01 2.5e5 2.9e5    31 8061.    35   36. FALSE           1.1        1.2 #>  8 2024-08-01 2.5e5 2.9e5    31 8051.    35   36. FALSE           1.1        1.2 #>  9 2024-09-01 2.5e5 2.9e5    30 8353.    35   35. TRUE            1.2        1.2 #> 10 2024-10-01 2.5e5 2.9e5    31 8067.    35   36. FALSE           1.1        1.2 #> 11 2024-11-01 2.5e5 2.9e5    30 8303.    35   35. FALSE           1.2        1.2 #> 12 2024-12-01 2.5e5 2.9e5    31 8052.    35   36. FALSE           1.1        1.2 #> # ℹ abbreviated names: ¹​ratio_ideal, ²​ratio_actual #> # ℹ 5 more variables: ratio_diff <dbl>, earb_target <dbl>, earb_diff <dbl>, #> #   gct_pct <dbl>, earb_pct <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/articles/getting-started.html","id":"quarterly-calculation","dir":"Articles","previous_headings":"Average Days in AR","what":"Quarterly Calculation","title":"Getting started","text":"","code":"tibble(   date = date_build(2024, 1:12),   gct  = rpois(12, 250000:400000),   earb = rpois(12, 285500:400000)   ) |>    avg_dar(     date,      gct,      earb,      dart = 35,     by = \"quarter\") #> # A tibble: 4 × 15 #>   date         earb   gct  ndip   adc  dart   dar dar_pass ratio_id…¹ ratio_ac…² #>   <date>      <int> <int> <int> <dbl> <dbl> <dbl> <lgl>         <dbl>      <dbl> #> 1 2024-03-01 285675 7.5e5    91 8244.    35   35. TRUE           0.38       0.38 #> 2 2024-06-01 285325 7.5e5    91 8233.    35   35. TRUE           0.38       0.38 #> 3 2024-09-01 285589 7.5e5    92 8167.    35   35. TRUE           0.38       0.38 #> 4 2024-12-01 285249 7.5e5    92 8156.    35   35. TRUE           0.38       0.38 #> # ℹ abbreviated names: ¹​ratio_ideal, ²​ratio_actual #> # ℹ 5 more variables: ratio_diff <dbl>, earb_target <dbl>, earb_diff <dbl>, #> #   gct_pct <dbl>, earb_pct <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/articles/parbx-and-bpi.html","id":"parbx","dir":"Articles","previous_headings":"","what":"PARBx","title":"PARBx & BPI","text":"PARB\\(x\\), Percentage Accounts Receivable Beyond \\(x\\) Days, exactly sounds like: monitoring percentage AR balances age, commonly referred aging “buckets” “bins.” idea, , revolutionary, suggestion use PARB\\(x\\) resolve Days AR’s inability highlight overall behavior Accounts Receivable. innovation comes form using PARB\\(x\\) data create index tracks payer’s performance month--month annually: PARB\\(x\\) data can used calculate BPI, Billing Performance Index. BPI key billing performance characteristic ’s indicator claims never paid. Obviously, lower index, better billing performance. statistic meaningful considered context relative performance payers. Lirov (2009) PARBx resolves sensitivity issues DAR metric. offers simple billing process metric ’s dependent charge. graphic representation skewed bell shape. steepness represents billing process quality; steep curve thin tail mean healthy billing process, flat bell fat tail also mean billing problems.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/parbx-and-bpi.html","id":"billing-performance-index-bpi","dir":"Articles","previous_headings":"","what":"Billing Performance Index (BPI)","title":"PARBx & BPI","text":"Lirov’s Billing Performance Index inspired Wall Street benchmarking technique called payment performance index. emphasizes advantage “context-driven, rule-based approach relative benchmarking”: advantage rule-driven indexing participation dynamically determined point time, reflecting dynamic nature entire market. Today’s top 10 list index performers may include names next week…financial instrument’s specific performance recomputed every time index computed, reflecting dynamic nature performance relative market . Lirov (2009) Applying indexing method payers allows providers track ease/difficulty reimbursement process payer. Inclusion monthly index indicates percentage AR older 120 days belonging payer ranks among lowest provider’s payer mix. results provider able focus AR management resources problematic payers. Lirov suggest several criteria considered payer elligible inclusion minimum threshold claims submitted total gross charges processed.","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/parbx-and-bpi.html","id":"monthly-bpi-ranking","dir":"Articles","previous_headings":"Billing Performance Index (BPI)","what":"Monthly BPI Ranking","title":"PARBx & BPI","text":"example, ’ve put mock data provided Dr. Lirov data frame. data ranks (indexes) payers top 10 lowest PARBx percentages recent month’s (December) figures, including November’s figures well. December’s rankings appear alongside Rank Change column indicating number places payer rose fell November December. Using {reactable} {reactablefmtr} can create interactive table data:","code":"parbx_rank <- dplyr::tibble(   payer = c(     \"Medicare Illinois\",     \"BCBS Illinois\",     \"Cigna\",     \"Horizon BCBS NJ\",     \"Aetna\",     \"UnitedHealthcare\",     \"Medicare NJ\",     \"GEICO\",     \"BCBS Pennsylvania\",     \"BCBS Georgia\"   ),   parbx_nov = c(5.8, 7.9, 15.7, 20.7, 20, 15, 19.4, 36.2, 30.5, 39.9) / 100,   parbx_dec = c(6.8, 8.1, 10.7, 13.9, 14.8, 21.2, 18.8, 35.2, 43.4, 43.3) / 100 ) |>    dplyr::mutate(     rank_nov = dplyr::min_rank(parbx_nov),     rank_dec = dplyr::min_rank(parbx_dec),     rank_change = rank_nov - rank_dec) |>    dplyr::arrange(rank_dec)  parbx_rank #> # A tibble: 10 × 6 #>    payer             parbx_nov parbx_dec rank_nov rank_dec rank_change #>    <chr>                 <dbl>     <dbl>    <int>    <int>       <int> #>  1 Medicare Illinois     0.058     0.068        1        1           0 #>  2 BCBS Illinois         0.079     0.081        2        2           0 #>  3 Cigna                 0.157     0.107        4        3           1 #>  4 Horizon BCBS NJ       0.207     0.139        7        4           3 #>  5 Aetna                 0.2       0.148        6        5           1 #>  6 Medicare NJ           0.194     0.188        5        6          -1 #>  7 UnitedHealthcare      0.15      0.212        3        7          -4 #>  8 GEICO                 0.362     0.352        9        8           1 #>  9 BCBS Georgia          0.399     0.433       10        9           1 #> 10 BCBS Pennsylvania     0.305     0.434        8       10          -2 parbx_rank |>   arrange(rank_dec) |>    mutate(dir = case_when(     rank_change == 0 ~ \"code-commit\",     rank_change > 0 ~ \"arrow-up\",     rank_change < 0 ~ \"arrow-down\"   ) ) |>    gt(rowname_col = \"payer\") |>   cols_add(change_abs = abs(rank_change)) |>   fmt_icon(     columns = dir,     fill_color = c(\"arrow-up\" = \"#15607A\", \"arrow-down\" = \"#FA8C00\", \"code-commit\" = \"grey90\")) |>    fmt_percent(columns = starts_with(\"parbx_\"),               drop_trailing_zeros = TRUE) |>   fmt_integer(columns = ends_with(\"_change\"), force_sign = TRUE) |>   cols_hide(columns = c(rank_change)) |>    cols_move_to_start(columns = c(dir, change_abs, rank_nov, parbx_nov, rank_dec, parbx_dec)) |>   cols_align(align = \"center\", columns = c(dir, rank_change, rank_nov, parbx_nov, rank_dec, parbx_dec)) |>    # cols_merge(columns = c(change_abs, dir), pattern = \"{1} {2}\") |>    cols_label(     change_abs = \"Change\",     rank_nov = \"Rank\",     parbx_nov = md(\"PARB<b><i><sub>x<\/sub><\/i><\/b>\"),     rank_dec = \"Rank\",     parbx_dec = md(\"PARB<b><i><sub>x<\/sub><\/i><\/b>\"),     dir = \"\"   ) |>   data_color(columns = starts_with(\"parbx_\"),              palette = c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\")) |>   opt_table_font(font = gt::google_font(name = \"Atkinson Hyperlegible\")) |>    tab_header(title = md(\"**Billing Performance Index**\"),              subtitle = \"Top 10 Payers with the Lowest Percentage of AR Beyond 120 Days\") |>    tab_spanner(label = md(\"**November**\"), columns = c(rank_nov, parbx_nov)) |>    tab_spanner(label = md(\"**December**\"), columns = c(rank_dec, parbx_dec)) |>    opt_stylize(color = \"cyan\", add_row_striping = FALSE) |>   tab_options(     quarto.disable_processing = TRUE,     table.font.size = gt::px(18),     table.width = gt::pct(100),     heading.align = \"left\",     heading.title.font.size = gt::px(24),     heading.subtitle.font.size = gt::px(21)) parbx_rank |>    select(payer, parbx_nov, parbx_dec) |>    mutate(     parbx_nov = parbx_nov * wakefield::probs(n()),     parbx_dec = parbx_dec * wakefield::probs(n()),     rank_nov = dplyr::min_rank(parbx_nov),     rank_dec = dplyr::min_rank(parbx_dec),     rank_change = rank_nov - rank_dec   ) |>   arrange(rank_dec) |>    gt(rowname_col = \"payer\") |>   fmt_percent(columns = starts_with(\"parbx_\"), drop_trailing_zeros = TRUE) |>   fmt_integer(columns = ends_with(\"_change\"), force_sign = TRUE) |>   cols_move_to_start(columns = c(rank_change, rank_nov, parbx_nov, rank_dec, parbx_dec)) |>   cols_align(align = \"center\", columns = c(rank_change, rank_nov, parbx_nov, rank_dec, parbx_dec)) |>    cols_label(     rank_change = \"Change\",     rank_nov = \"Rank\",     parbx_nov = md(\"<sub>wt<\/sub>PARB<b><i><sub>x<\/sub><\/i><\/b>\"),     rank_dec = \"Rank\",     parbx_dec = md(\"<sub>wt<\/sub>PARB<b><i><sub>x<\/sub><\/i><\/b>\")   ) |>   data_color(columns = starts_with(\"parbx_\"),              palette = c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\")) |>    opt_table_font(font = gt::google_font(name = \"Atkinson Hyperlegible\")) |>    tab_header(title = md(\"**Weighted Billing Performance Index**\"),              subtitle = \"Top 10 Payers with the Lowest Percentage of AR Beyond 120 Days\") |>    tab_spanner(label = md(\"**November**\"), columns = c(rank_nov, parbx_nov)) |>    tab_spanner(label = md(\"**December**\"), columns = c(rank_dec, parbx_dec)) |>    opt_stylize(color = \"cyan\", add_row_striping = FALSE) |>   tab_options(     quarto.disable_processing = TRUE,     table.font.size = gt::px(18),     table.width = gt::pct(100),     heading.align = \"left\",     heading.title.font.size = gt::px(24),     heading.subtitle.font.size = gt::px(21)               )"},{"path":"https://andrewallenbruce.github.io/forager/articles/parbx-and-bpi.html","id":"annual-bpi-summary","dir":"Articles","previous_headings":"Billing Performance Index (BPI)","what":"Annual BPI Summary","title":"PARBx & BPI","text":"final destination data annual summary monthly Billing Performance Index. Annual BPI simply list payers participated Monthly BPI, ranked number times made top 10 year. Also included payer’s mean, minimum, maximum BPI year. Lirov sums importance annual summary: low percentage accounts receivable beyond 120 days critical included billing index. However, frequency inclusion index robust performance metric, measures billing performance consistency longer time period.","code":"tibble(   rank = 1:15,   n_months = c(     12, 11, 11, 10, 10,     7, 7, 7, 5, 4, 3,     3, 3, 2, 2   ),   payer = c(     \"BCBS Illinois\", \"Cigna\",     \"Medicare New Jersey\",     \"Aetna\", \"UnitedHealthcare\",     \"Medicare Illinois\", \"Horizon BCBS New Jersey\",     \"BCBS Pennsylvania\", \"BCBS Georgia\",     \"Anthem BCBS Colorado\",     \"BCBS Michigan\", \"BCBS Texas\", \"GEICO\",     \"Anthem BCBS Colorado\", \"Humana\"   ),   min = c(     7.1, 8.9, 7.5, 8.8, 11.3,     5.8, 13.9, 12.4, 22.9, 12.4,     3.2, 10.3, 33.4, 6.8, 7.9   ) / 100,   mean = c(     10.9, 13.4, 15.7, 16.6, 17.2,     14, 18, 23.5, 34.1, 19.1, 6.8,     15.2, 34.9, 9.6, 9.9   ) / 100,   max = c(     16, 24.1, 20.5, 22.1, 23.2,     30.4, 24.3, 43.4, 43.3, 34.1,     13.6, 20, 36.2, 12.3, 11.8   ) / 100 ) |>    gt(rowname_col = \"rank\", groupname_col = \"payer\", row_group_as_column = TRUE) |>   fmt_percent(columns = c(min, mean, max), drop_trailing_zeros = TRUE) |>   cols_align(align = \"center\", columns = c(rank, n_months, min, mean, max)) |>    cols_label(     rank = \"Rank\",     n_months = \"Months\",     min = \"Minimum\",     mean = \"Average\",     max = \"Maximum\"   ) |>   data_color(columns = c(min, mean, max),              palette = c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\")) |>    opt_table_font(font = gt::google_font(name = \"Atkinson Hyperlegible\")) |>    tab_header(title = md(\"**Annual Billing Performance Index**\"),              subtitle = \"Top 15 Payers Ranked by Months Included on BPI.\") |>    tab_spanner(label = md(\"**Percentage of AR Beyond 120 Days**\"), columns = c(min, mean, max)) |>    opt_stylize(color = \"cyan\", add_row_striping = FALSE) |>   tab_options(     quarto.disable_processing = TRUE,     table.font.size = gt::px(18),     table.width = gt::pct(100),     heading.align = \"left\",     heading.title.font.size = gt::px(24),     heading.subtitle.font.size = gt::px(21))"},{"path":"https://andrewallenbruce.github.io/forager/articles/parbx-and-bpi.html","id":"mock-parbx","dir":"Articles","previous_headings":"","what":"Mock PARBx","title":"PARBx & BPI","text":"","code":"mock_parbx() #> # A tibble: 1,620 × 5 #>    date       month    payer    aging_bin aging_prop #>    <date>     <ord>    <chr>    <ord>          <dbl> #>  1 2024-01-01 January  Medicare 0-30          0.31   #>  2 2024-01-01 January  Medicare 31-60         0.37   #>  3 2024-01-01 January  Medicare 61-90         0.17   #>  4 2024-01-01 January  Medicare 91-120        0.0097 #>  5 2024-01-01 January  Medicare 121+          0.15   #>  6 2024-02-01 February Medicare 0-30          0.22   #>  7 2024-02-01 February Medicare 31-60         0.24   #>  8 2024-02-01 February Medicare 61-90         0.077  #>  9 2024-02-01 February Medicare 91-120        0.32   #> 10 2024-02-01 February Medicare 121+          0.15   #> # ℹ 1,610 more rows mock_parbx() |>   mutate(aging_prop = fuimus::roundup(aging_prop * 100)) |>    pivot_wider(names_from = \"aging_bin\",                values_from = \"aging_prop\") |>    arrange(month) |>    select(-date) |>    gt(rowname_col = \"payer\",       groupname_col = \"month\",       row_group_as_column = TRUE) |>    fmt_number(decimals = 1) |>    opt_table_font(font = google_font(name = \"Atkinson Hyperlegible\")) |>    tab_options(     column_labels.font.weight = \"bold\",     column_labels.font.size = px(16),     column_labels.border.bottom.width = px(3),     quarto.disable_processing = TRUE,     table.font.size = px(18),     table.width = pct(75),     heading.align = \"left\",     heading.title.font.size = px(24),     heading.subtitle.font.size = px(21),     # table_body.hlines.style = \"none\",     column_labels.border.top.color = \"darkgreen\",     column_labels.border.bottom.color = \"darkgreen\",     table_body.border.bottom.color = \"darkgreen\",     stub.border.style = \"none\",     stub.background.color = \"darkgreen\",     # stub.font.weight = \"bold\",     row_group.font.weight = \"bold\"     ) ex_prop <- mock_parbx() |>    pivot_wider(names_from = \"aging_bin\",                values_from = \"aging_prop\") |>    select(month, payer, `121+`) |>    pivot_wider(names_from = month, values_from = `121+`) |>    rlang::set_names(c(\"payer\", month.abb))  ex_prop_payer <- mock_parbx() |>    pivot_wider(names_from = \"aging_bin\",                values_from = \"aging_prop\") |>    select(month, payer, `121+`) |>    pivot_wider(names_from = payer, values_from = `121+`)  ex_prop |>    gt(rowname_col = \"payer\") |>    fmt_percent(decimals = 0) |>   cols_align(align = \"center\") |>    data_color(     columns = !payer,     palette = \"ggsci::red_material\",     apply_to = \"text\"     ) |>    opt_table_font(font = google_font(name = \"Fira Code\")) |>    tab_options(     column_labels.font.weight = \"bold\",     quarto.disable_processing = TRUE,     # table.background.color = \"grey50\",     table.font.size = gt::px(18),     table.width = gt::pct(100),     heading.align = \"left\",     heading.title.font.size = gt::px(24),     heading.subtitle.font.size = gt::px(21)) ex_prop |>    reframe(     payer,     Jan = min_rank(Jan),     Feb = min_rank(Feb),     Mar = min_rank(Mar),     Apr = min_rank(Apr),     May = min_rank(May),     Jun = min_rank(Jun),     Jul = min_rank(Jul),     Aug = min_rank(Aug),     Sep = min_rank(Sep),     Oct = min_rank(Oct),     Nov = min_rank(Nov),     Dec = min_rank(Dec)) |>    gt(rowname_col = \"payer\") |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    data_color(     columns = !payer,     palette = \"Greens\",     apply_to = \"text\",     reverse = TRUE     ) |>    cols_align(align = \"center\") |>    tab_options(     column_labels.font.weight = \"bold\",     column_labels.font.size = px(16),     column_labels.border.bottom.width = px(3),     quarto.disable_processing = TRUE,     table.font.size = px(18),     table.width = pct(75),     heading.align = \"left\",     heading.title.font.size = px(24),     heading.subtitle.font.size = px(21),     table_body.hlines.style = \"none\",     column_labels.border.top.color = \"darkgreen\",     column_labels.border.bottom.color = \"darkgreen\",     table_body.border.bottom.color = \"darkgreen\",     stub.border.style = \"none\",     stub.background.color = \"darkgreen\"     )"},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"interval-vectors-in-r-with-ivs","dir":"Articles","previous_headings":"","what":"Interval Vectors in R with ivs","title":"Patient Scheduling","text":"ivs blog","code":""},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"find-ranges-of-dates-when-an-apartment-is-empty","dir":"Articles","previous_headings":"Interval Vectors in R with ivs","what":"Find ranges of dates when an apartment is empty","title":"Patient Scheduling","text":"Adapted ivs example Convert dates rather date-times Add 1 end_date make ranges match [, ), ivs wants (makes sense ) apartment, compute interval complement iv_set_complement(). empty dates (keeps mind overlaps) Bind complement original data sort end dates final result +1 vs desired_outcome find interval problems easier think use right open intervals, [, ).","code":"example_dates <- structure(   list(     apartment = c(\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\"),      start_date = structure(       c(         1640995200, 1642291200, 1649980800, 1655769600, 1644451200,         1646092800, 1659312000, 1646438400, 1649376000, 1664582400       ),        class = c(\"POSIXct\", \"POSIXt\"),        tzone = \"UTC\"     ),      end_date = structure(       c(         1642204800, 1648166400, 1655683200, 1668643200, 1655251200,          1653868800, 1667260800, 1654819200, 1661385600, 1668470400       ),        class = c(\"POSIXct\", \"POSIXt\"),        tzone = \"UTC\"     ),      status = c(       \"person in apartment\", \"person in apartment\", \"person in apartment\",        \"person in apartment\", \"person in apartment\", \"person in apartment\",       \"person in apartment\", \"person in apartment\", \"person in apartment\",        \"person in apartment\"     )   ),    class = c(\"tbl_df\", \"tbl\", \"data.frame\"),    row.names = c(NA, -10L) )  # Convert dates to dates rather than date-times example_dates <- example_dates |>   mutate(start_date = as.Date(start_date),           end_date = as.Date(end_date)) |>   mutate(end_date = end_date + 1) # Make `end_date` exclusive  example_dates #> # A tibble: 10 × 4 #>    apartment start_date end_date   status              #>    <chr>     <date>     <date>     <chr>               #>  1 A         2022-01-01 2022-01-16 person in apartment #>  2 A         2022-01-16 2022-03-26 person in apartment #>  3 A         2022-04-15 2022-06-21 person in apartment #>  4 A         2022-06-21 2022-11-18 person in apartment #>  5 B         2022-02-10 2022-06-16 person in apartment #>  6 B         2022-03-01 2022-05-31 person in apartment #>  7 B         2022-08-01 2022-11-02 person in apartment #>  8 C         2022-03-05 2022-06-11 person in apartment #>  9 C         2022-04-08 2022-08-26 person in apartment #> 10 C         2022-10-01 2022-11-16 person in apartment ggplot(example_dates) +    geom_linerange(aes(xmin = start_date,                       xmax = end_date,                       y = apartment), linewidth = 1.25, color = \"grey\") +   geom_point(aes(x = start_date, y = apartment),               colour = \"blue\",               #fill = \"black\",               #stroke = 1,               size = 3,              shape = 21) +   geom_point(aes(x = end_date, y = apartment), colour = \"red\",               #fill = \"black\",               size = 3,              shape = 21) +   ggthemes::geom_rangeframe() +   ggthemes::theme_pander() +   labs(x = \"\", y = \"\") # Combine start/end into an interval vector example_dates2 <- example_dates |>   mutate(range = iv(start_date, end_date), .keep = \"unused\")  example_dates2 #> # A tibble: 10 × 3 #>    apartment status                                 range #>    <chr>     <chr>                             <iv<date>> #>  1 A         person in apartment [2022-01-01, 2022-01-16) #>  2 A         person in apartment [2022-01-16, 2022-03-26) #>  3 A         person in apartment [2022-04-15, 2022-06-21) #>  4 A         person in apartment [2022-06-21, 2022-11-18) #>  5 B         person in apartment [2022-02-10, 2022-06-16) #>  6 B         person in apartment [2022-03-01, 2022-05-31) #>  7 B         person in apartment [2022-08-01, 2022-11-02) #>  8 C         person in apartment [2022-03-05, 2022-06-11) #>  9 C         person in apartment [2022-04-08, 2022-08-26) #> 10 C         person in apartment [2022-10-01, 2022-11-16) # Compute the complement per apartment empty_dates <- example_dates2 |>   group_by(apartment) |>   summarise(range = iv_set_complement(range)) |>   mutate(status = \"apartment empty\")  empty_dates #> # A tibble: 3 × 3 #>   apartment                    range status          #>   <chr>                   <iv<date>> <chr>           #> 1 A         [2022-03-26, 2022-04-15) apartment empty #> 2 B         [2022-06-16, 2022-08-01) apartment empty #> 3 C         [2022-08-26, 2022-10-01) apartment empty # Bind and sort apt_dates <- bind_rows(example_dates2, empty_dates) |>   arrange(apartment, range) |>   mutate(start_date = iv_start(range),           end_date = iv_end(range),           .keep = \"unused\") apt_dates #> # A tibble: 13 × 4 #>    apartment status              start_date end_date   #>    <chr>     <chr>               <date>     <date>     #>  1 A         person in apartment 2022-01-01 2022-01-16 #>  2 A         person in apartment 2022-01-16 2022-03-26 #>  3 A         apartment empty     2022-03-26 2022-04-15 #>  4 A         person in apartment 2022-04-15 2022-06-21 #>  5 A         person in apartment 2022-06-21 2022-11-18 #>  6 B         person in apartment 2022-02-10 2022-06-16 #>  7 B         person in apartment 2022-03-01 2022-05-31 #>  8 B         apartment empty     2022-06-16 2022-08-01 #>  9 B         person in apartment 2022-08-01 2022-11-02 #> 10 C         person in apartment 2022-03-05 2022-06-11 #> 11 C         person in apartment 2022-04-08 2022-08-26 #> 12 C         apartment empty     2022-08-26 2022-10-01 #> 13 C         person in apartment 2022-10-01 2022-11-16"},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"group-hospital-patient-stay-dates","dir":"Articles","previous_headings":"Interval Vectors in R with ivs","what":"Group hospital patient stay dates","title":"Patient Scheduling","text":"Adapted ivs example","code":"df <- tribble(   ~Patient.ID, ~Admitted.Date, ~Discharge.Date,   810L,        \"2020-12-15\",    \"2020-12-16\",   810L,        \"2021-06-17\",    \"2021-06-19\",   810L,        \"2021-06-19\",    \"2021-06-27\",   810L,        \"2021-06-27\",    \"2021-07-03\" ) |>    mutate(Admitted.Date = as.Date(Admitted.Date),          Discharge.Date = as.Date(Discharge.Date)) df #> # A tibble: 4 × 3 #>   Patient.ID Admitted.Date Discharge.Date #>        <int> <date>        <date>         #> 1        810 2020-12-15    2020-12-16     #> 2        810 2021-06-17    2021-06-19     #> 3        810 2021-06-19    2021-06-27     #> 4        810 2021-06-27    2021-07-03 # Create an interval vector combining the hospital stay as: # [Admitted.Date, Discharge.Date) df <- df |>   mutate(Stay = iv(Admitted.Date, Discharge.Date), .keep = \"unused\")  df #> # A tibble: 4 × 2 #>   Patient.ID                     Stay #>        <int>               <iv<date>> #> 1        810 [2020-12-15, 2020-12-16) #> 2        810 [2021-06-17, 2021-06-19) #> 3        810 [2021-06-19, 2021-06-27) #> 4        810 [2021-06-27, 2021-07-03) # Assuming you have multiple patients, we will group by `Patient.ID`. # Then compute the non-overlapping interval \"groups\" per patient with `iv_groups()` df |>   group_by(Patient.ID) |>   reframe(Stay = iv_groups(Stay)) #> # A tibble: 2 × 2 #>   Patient.ID                     Stay #>        <int>               <iv<date>> #> 1        810 [2020-12-15, 2020-12-16) #> 2        810 [2021-06-17, 2021-07-03) # You can also see which \"group\" each stay fell in by using `iv_identify_group()` df |>   group_by(Patient.ID) |>   mutate(Group = iv_identify_group(Stay)) #> # A tibble: 4 × 3 #> # Groups:   Patient.ID [1] #>   Patient.ID                     Stay                    Group #>        <int>               <iv<date>>               <iv<date>> #> 1        810 [2020-12-15, 2020-12-16) [2020-12-15, 2020-12-16) #> 2        810 [2021-06-17, 2021-06-19) [2021-06-17, 2021-07-03) #> 3        810 [2021-06-19, 2021-06-27) [2021-06-17, 2021-07-03) #> 4        810 [2021-06-27, 2021-07-03) [2021-06-17, 2021-07-03)"},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"find-overlapping-dates-for-each-id-and-create-a-new-row-for-the-overlap","dir":"Articles","previous_headings":"Interval Vectors in R with ivs","what":"Find overlapping dates for each ID and create a new row for the overlap","title":"Patient Scheduling","text":"example like find overlapping dates ID create new row overlapping dates also combine characters (char) lines. possible data 2 overlaps need 2 combinations characters. eg. ERM can also use dplyr/tidyr along ivs package, package dedicated working interval vectors like . allows combine start/end dates single interval column use variety iv_*() functions , use iv_identify_splits(). Understanding iv_identify_splits() can little tricky first, ’d encourage take look graphical representation operation .","code":"df3 <- tribble(   ~ID,       ~date1,       ~date2, ~char,   15L, \"2003-04-05\", \"2003-05-06\",   \"E\",   15L, \"2003-04-20\", \"2003-06-20\",   \"R\",   16L, \"2001-01-02\", \"2002-03-04\",   \"M\",   17L, \"2003-03-05\", \"2007-02-22\",   \"I\",   17L, \"2005-04-15\", \"2014-05-19\",   \"C\",   17L, \"2007-05-15\", \"2008-02-05\",   \"I\",   17L, \"2008-02-05\", \"2012-02-14\",   \"M\",   17L, \"2010-06-07\", \"2011-02-14\",   \"V\",   17L, \"2010-09-22\", \"2014-05-19\",   \"P\",   17L, \"2012-02-28\", \"2013-03-04\",   \"R\" ) |>   mutate(     date1 = as.Date(date1),     date2 = as.Date(date2),     days = trunc(as.integer(date2 - date1) / 2),     date_mid = date2 - lubridate::days(days)   )  # Combine the start/stop endpoints into a single interval vector df3 <- df3 |>   mutate(interval = iv(date1, date2))  # Note that these are half-open intervals and you may need to adjust the end! df3 #> # A tibble: 10 × 7 #>       ID date1      date2      char   days date_mid                   interval #>    <int> <date>     <date>     <chr> <dbl> <date>                   <iv<date>> #>  1    15 2003-04-05 2003-05-06 E        15 2003-04-21 [2003-04-05, 2003-05-06) #>  2    15 2003-04-20 2003-06-20 R        30 2003-05-21 [2003-04-20, 2003-06-20) #>  3    16 2001-01-02 2002-03-04 M       213 2001-08-03 [2001-01-02, 2002-03-04) #>  4    17 2003-03-05 2007-02-22 I       725 2005-02-27 [2003-03-05, 2007-02-22) #>  5    17 2005-04-15 2014-05-19 C      1660 2009-11-01 [2005-04-15, 2014-05-19) #>  6    17 2007-05-15 2008-02-05 I       133 2007-09-25 [2007-05-15, 2008-02-05) #>  7    17 2008-02-05 2012-02-14 M       735 2010-02-09 [2008-02-05, 2012-02-14) #>  8    17 2010-06-07 2011-02-14 V       126 2010-10-11 [2010-06-07, 2011-02-14) #>  9    17 2010-09-22 2014-05-19 P       667 2012-07-21 [2010-09-22, 2014-05-19) #> 10    17 2012-02-28 2013-03-04 R       185 2012-08-31 [2012-02-28, 2013-03-04) ggplot(df3) +    geom_segment(aes(y = char, yend = char, x = date1, xend = date2), color = \"darkgreen\") +   geom_text(aes(y = char, x = date_mid, label = char), fontface = \"bold\") +    # geom_point(aes(y = char, x = date_mid), shape = 23) +   ggforce::geom_mark_rect(aes(y = char, x = date_mid, fill = date_mid, group = char)) +   # ggforce::geom_mark_rect(aes(y = char, x = date2, fill = date2)) +   # ggthemes::theme_few() +    # ggthemes::extended_range_breaks() +   ggthemes::geom_rangeframe() +   ggthemes::theme_pander() +   scale_x_date(date_breaks = \"1 year\", date_labels = \"%y\", expand =  c(0.15, 0.15)) +   labs(x = NULL, y = NULL) +   theme(legend.position = \"none\") # For each ID, compute the \"splits\" for each interval. # This splits on all the endpoints and returns a list column df33 <- df3 |>   group_by(ID) |>   mutate(splits = iv_identify_splits(interval))  print(df33, n = 3) #> # A tibble: 10 × 8 #> # Groups:   ID [3] #>      ID date1      date2      char   days date_mid                   interval #>   <int> <date>     <date>     <chr> <dbl> <date>                   <iv<date>> #> 1    15 2003-04-05 2003-05-06 E        15 2003-04-21 [2003-04-05, 2003-05-06) #> 2    15 2003-04-20 2003-06-20 R        30 2003-05-21 [2003-04-20, 2003-06-20) #> 3    16 2001-01-02 2002-03-04 M       213 2001-08-03 [2001-01-02, 2002-03-04) #> # ℹ 7 more rows #> # ℹ 1 more variable: splits <list<iv<date>>> # Note how the total range of the splits vector matches the # range of the corresponding interval df33$interval[[1]] #> <iv<date>[1]> #> [1] [2003-04-05, 2003-05-06) df33$splits[[1]] #> <iv<date>[2]> #> [1] [2003-04-05, 2003-04-20) [2003-04-20, 2003-05-06) # From there we can unchop() the splits column so we can group on it df33 <- df33 |> unchop(splits)  # Note how rows 2 and 3 have the same `splits` value, so `E` and `R` will # go together df33 #> # A tibble: 30 × 8 #> # Groups:   ID [3] #>       ID date1      date2      char   days date_mid                   interval #>    <int> <date>     <date>     <chr> <dbl> <date>                   <iv<date>> #>  1    15 2003-04-05 2003-05-06 E        15 2003-04-21 [2003-04-05, 2003-05-06) #>  2    15 2003-04-05 2003-05-06 E        15 2003-04-21 [2003-04-05, 2003-05-06) #>  3    15 2003-04-20 2003-06-20 R        30 2003-05-21 [2003-04-20, 2003-06-20) #>  4    15 2003-04-20 2003-06-20 R        30 2003-05-21 [2003-04-20, 2003-06-20) #>  5    16 2001-01-02 2002-03-04 M       213 2001-08-03 [2001-01-02, 2002-03-04) #>  6    17 2003-03-05 2007-02-22 I       725 2005-02-27 [2003-03-05, 2007-02-22) #>  7    17 2003-03-05 2007-02-22 I       725 2005-02-27 [2003-03-05, 2007-02-22) #>  8    17 2005-04-15 2014-05-19 C      1660 2009-11-01 [2005-04-15, 2014-05-19) #>  9    17 2005-04-15 2014-05-19 C      1660 2009-11-01 [2005-04-15, 2014-05-19) #> 10    17 2005-04-15 2014-05-19 C      1660 2009-11-01 [2005-04-15, 2014-05-19) #> # ℹ 20 more rows #> # ℹ 1 more variable: splits <iv<date>> # Group by (ID, splits) and paste the `char` column elements together df33 |>   group_by(ID, splits) |>   summarise(char = paste0(char, collapse = \",\"), .groups = \"drop\") #> # A tibble: 15 × 3 #>       ID                   splits char    #>    <int>               <iv<date>> <chr>   #>  1    15 [2003-04-05, 2003-04-20) E       #>  2    15 [2003-04-20, 2003-05-06) E,R     #>  3    15 [2003-05-06, 2003-06-20) R       #>  4    16 [2001-01-02, 2002-03-04) M       #>  5    17 [2003-03-05, 2005-04-15) I       #>  6    17 [2005-04-15, 2007-02-22) I,C     #>  7    17 [2007-02-22, 2007-05-15) C       #>  8    17 [2007-05-15, 2008-02-05) C,I     #>  9    17 [2008-02-05, 2010-06-07) C,M     #> 10    17 [2010-06-07, 2010-09-22) C,M,V   #> 11    17 [2010-09-22, 2011-02-14) C,M,V,P #> 12    17 [2011-02-14, 2012-02-14) C,M,P   #> 13    17 [2012-02-14, 2012-02-28) C,P     #> 14    17 [2012-02-28, 2013-03-04) C,P,R   #> 15    17 [2013-03-04, 2014-05-19) C,P"},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"aggregate-counts-by-month-from-start-stop-ranged-variables","dir":"Articles","previous_headings":"Interval Vectors in R with ivs","what":"Aggregate counts by month from start-stop ranged variables","title":"Patient Scheduling","text":"actually compute counts, use iv_count_between(), counts instances month[] interval enrollments$active","code":"enrollments <- tribble(   ~unique_name, ~enrollment_start, ~enrollment_end,   \"Amy\",        \"1, Jan, 2017\",    \"30, Sep, 2018\",   \"Franklin\",   \"1, Jan, 2017\",    \"19, Feb, 2017\",   \"Franklin\",   \"5, Jun, 2017\",    \"4, Feb, 2018\",   \"Franklin\",   \"21, Oct, 2018\",   \"9, Mar, 2019\",   \"Samir\",      \"1, Jan, 2017\",    \"4, Feb, 2017\",   \"Samir\",      \"5, Apr, 2017\",    \"12, Sep, 2018\" )  # Parse these into \"day\" precision year-month-day objects, then restrict # them to just \"month\" precision because that is all we need enrollments <- enrollments |>    mutate(     start = enrollment_start |>        year_month_day_parse(format = \"%d, %b, %Y\") |>        calendar_narrow(\"month\"),     end = enrollment_end |>        year_month_day_parse(format = \"%d, %b, %Y\") |>        calendar_narrow(\"month\") |>        add_months(1),     .keep = \"unused\"   )  enrollments #> # A tibble: 6 × 3 #>   unique_name start        end          #>   <chr>       <ymd<month>> <ymd<month>> #> 1 Amy         2017-01      2018-10      #> 2 Franklin    2017-01      2017-03      #> 3 Franklin    2017-06      2018-03      #> 4 Franklin    2018-10      2019-04      #> 5 Samir       2017-01      2017-03      #> 6 Samir       2017-04      2018-10 # Create an interval vector, note that these are half-open intervals. # The month on the RHS is not included, which is why we added 1 to `end` above. enrollments <- enrollments |>    mutate(active = iv(start, end),           .keep = \"unused\") enrollments #> # A tibble: 6 × 2 #>   unique_name             active #>   <chr>         <iv<ymd<month>>> #> 1 Amy         [2017-01, 2018-10) #> 2 Franklin    [2017-01, 2017-03) #> 3 Franklin    [2017-06, 2018-03) #> 4 Franklin    [2018-10, 2019-04) #> 5 Samir       [2017-01, 2017-03) #> 6 Samir       [2017-04, 2018-10) # We'll generate a sequence of months that will be part of the final result bounds <- range(enrollments$active) lower <- iv_start(bounds[[1]]) upper <- iv_end(bounds[[2]]) - 1L months <- tibble(month = seq(lower, upper, by = 1)) months #> # A tibble: 27 × 1 #>    month        #>    <ymd<month>> #>  1 2017-01      #>  2 2017-02      #>  3 2017-03      #>  4 2017-04      #>  5 2017-05      #>  6 2017-06      #>  7 2017-07      #>  8 2017-08      #>  9 2017-09      #> 10 2017-10      #> # ℹ 17 more rows months |>    mutate(count = iv_count_between(month, enrollments$active)) #> # A tibble: 27 × 2 #>    month        count #>    <ymd<month>> <int> #>  1 2017-01          3 #>  2 2017-02          3 #>  3 2017-03          1 #>  4 2017-04          2 #>  5 2017-05          2 #>  6 2017-06          3 #>  7 2017-07          3 #>  8 2017-08          3 #>  9 2017-09          3 #> 10 2017-10          3 #> # ℹ 17 more rows"},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"number-of-records-open-in-a-month-in-dataset-containing-single-records-with-start-end-dates","dir":"Articles","previous_headings":"Interval Vectors in R with ivs","what":"Number of records open in a month, in dataset containing single records with start / end dates","title":"Patient Scheduling","text":"","code":"ds <- data.frame(   record_id = c(\"00a\", \"00b\", \"00c\"),   record_start_date = as.Date(c(\"2020-01-16\", \"2020-03-25\", \"2020-02-22\")),   record_end_date = as.Date(c(\"2020-12-05\", \"2020-06-21\", \"2020-11-12\")) )  # Record the start and end months to generate the counts for start <- date_start(min(ds$record_start_date), \"year\") end <- date_end(max(ds$record_end_date), \"year\") + 1L  # Construct an interval vector ds <- ds |>    mutate(     record_range = iv(record_start_date, record_end_date),      .keep = \"unused\"   )  ds #>   record_id             record_range #> 1       00a [2020-01-16, 2020-12-05) #> 2       00b [2020-03-25, 2020-06-21) #> 3       00c [2020-02-22, 2020-11-12) # Generate the months sequence to count along result <- tibble(   month = date_seq(     from = start,      to = end,      by = duration_months(1)   ) )  # Count the number of times `month[[i]]` is between any of the # ranges in `ds$record_range` result |>    mutate(     count = iv_count_between(month, ds$record_range)   ) #> # A tibble: 13 × 2 #>    month      count #>    <date>     <int> #>  1 2020-01-01     0 #>  2 2020-02-01     1 #>  3 2020-03-01     2 #>  4 2020-04-01     3 #>  5 2020-05-01     3 #>  6 2020-06-01     3 #>  7 2020-07-01     2 #>  8 2020-08-01     2 #>  9 2020-09-01     2 #> 10 2020-10-01     2 #> 11 2020-11-01     2 #> 12 2020-12-01     1 #> 13 2021-01-01     0"},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"generate-new-variable-based-on-start-and-stop-date","dir":"Articles","previous_headings":"Interval Vectors in R with ivs","what":"Generate new variable based on start and stop date","title":"Patient Scheduling","text":"","code":"tb <- read.table(header = T,  text = \"   Machine   Start      Stop           ServiceType  1       XX 2014-12-04       NA          AA 2       XX 2013-09-05 2013-11-05          BB 3       XX 2013-11-21 2014-09-25          BB 4       XX 2013-10-11 2014-11-18          BB 5       XX 2021-12-03       <NA>          AA 6       XX 2020-08-06 2022-09-15          AA 7       XX 2021-06-10       <NA>          BB 8       YY 2020-01-17       <NA>          BB 9       YY 2015-11-04 2018-04-30          BB 10      YY 2016-05-28 2019-03-21          BB 11      YY 2019-09-27       <NA>          BB 12      YY 2018-01-05       <NA>          AA \") tb #>    Machine      Start       Stop ServiceType #> 1       XX 2014-12-04       <NA>          AA #> 2       XX 2013-09-05 2013-11-05          BB #> 3       XX 2013-11-21 2014-09-25          BB #> 4       XX 2013-10-11 2014-11-18          BB #> 5       XX 2021-12-03       <NA>          AA #> 6       XX 2020-08-06 2022-09-15          AA #> 7       XX 2021-06-10       <NA>          BB #> 8       YY 2020-01-17       <NA>          BB #> 9       YY 2015-11-04 2018-04-30          BB #> 10      YY 2016-05-28 2019-03-21          BB #> 11      YY 2019-09-27       <NA>          BB #> 12      YY 2018-01-05       <NA>          AA tb|>    mutate(Stop = ifelse(Stop == \"<NA>\", Start, Stop),          across(c(Start, Stop), ymd),          Stop = if_else(Stop == Start, Stop + days(1), Stop),          ivs = iv(Start, Stop)) |>    group_by(Machine, gp = iv_identify_group(ivs)) |>    summarise(ServiceType = toString(unique(ServiceType)), .groups = \"drop\") |>    mutate(gp = iv_start(gp),          ServiceType = ifelse(ServiceType %in% c(\"BB, AA\", \"AA, BB\"),                                \"CC\", ServiceType)) #> # A tibble: 6 × 3 #>   Machine gp         ServiceType #>   <chr>   <date>     <chr>       #> 1 XX      2013-09-05 BB          #> 2 XX      2020-08-06 CC          #> 3 XX      NA         AA          #> 4 YY      2015-11-04 CC          #> 5 YY      2019-09-27 BB          #> 6 YY      2020-01-17 BB"},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"aggregate-data-by-month-using-start-and-end-dates-to-calculate-monthly-disease-prevelance","dir":"Articles","previous_headings":"Interval Vectors in R with ivs","what":"Aggregate Data by Month using start and end dates to calculate monthly disease prevelance","title":"Patient Scheduling","text":"’s solution uses ivs (interval vectors), clock (month precision dates), vctrs (counting matches). Note ivs requires half-open intervals, practice means add 1 “end” months creating interval vector. real stars show : vec_count_matches() count time month appeared disease_date, gives us n_disease iv_count_between() count time month fell range, gives us n_total Update: dev version ivs (soon 0.2.0), even easier iv_diff() iv_count_includes(), means don’t need custom vec_count_matches() helper :","code":"ddf <- data.frame(patid=c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"),                                     start_date=c(\"01/03/2016\",\"24/08/2016\",                                \"01/01/2016\",\"24/02/2016\",                                \"24/04/2016\",\"01/04/2016\",                                \"01/09/2016\"),                                     end_date=c(\"31/12/2016\",\"31/12/2016\",                              \"23/12/2016\",\"01/08/2016\",                              \"17/06/2016\",\"04/05/2016\",                              \"31/10/2016\"),                                     disease=c(\"yes\",\"no\",\"yes\",\"no\",                             \"no\",\"yes\",\"yes\"),                                     disease_date=c(\"15/08/2016\",NA,                                  \"15/08/2016\",NA,NA,                                  \"01/05/2016\",\"31/10/2016\")) ddf #>   patid start_date   end_date disease disease_date #> 1     1 01/03/2016 31/12/2016     yes   15/08/2016 #> 2     2 24/08/2016 31/12/2016      no         <NA> #> 3     3 01/01/2016 23/12/2016     yes   15/08/2016 #> 4     4 24/02/2016 01/08/2016      no         <NA> #> 5     5 24/04/2016 17/06/2016      no         <NA> #> 6     6 01/04/2016 04/05/2016     yes   01/05/2016 #> 7     7 01/09/2016 31/10/2016     yes   31/10/2016 # Only need these cols ddf <- ddf |>   select(start_date, end_date, disease_date)  # Turn into actual dates ddf <- ddf |>   mutate(     across(everything(), \\(col) {       date_parse(col, format = \"%d/%m/%Y\")     })   )  # We really only need month based information, so drop the days ddf <- ddf |>   mutate(     across(everything(), \\(col) {       calendar_narrow(as_year_month_day(col), \"month\")     })   )  # Turn the start/end dates into real ranges. # Make them half-open ranges by adding 1 to the end date month ddf <- ddf |>   mutate(range = iv(start_date, end_date + 1L), .keep = \"unused\", .before = 1)  ddf #>                range disease_date #> 1 [2016-03, 2017-01)      2016-08 #> 2 [2016-08, 2017-01)         <NA> #> 3 [2016-01, 2017-01)      2016-08 #> 4 [2016-02, 2016-09)         <NA> #> 5 [2016-04, 2016-07)         <NA> #> 6 [2016-04, 2016-06)      2016-05 #> 7 [2016-09, 2016-11)      2016-10 # Little helper to count the number of times each `needle` appears in `haystack` vec_count_matches <- function(needles, haystack) {   out <- vec_rep(0L, times = vec_size(needles))   matches <- vec_locate_matches(needles, haystack, no_match = \"drop\")   result <- vec_count(matches$needles, sort = \"location\")   out[result$key] <- result$count   out }  # Create a full sequence from min month to max month from <- min(iv_start(ddf$range)) to <- max(iv_end(ddf$range))  tibble(   month = seq(from = from, to = to, by = 1),   n_disease = vec_count_matches(month, ddf$disease_date),   n_total = iv_count_between(month, ddf$range),   prevalence = n_disease / n_total ) #> # A tibble: 13 × 4 #>    month        n_disease n_total prevalence #>    <ymd<month>>     <int>   <int>      <dbl> #>  1 2016-01              0       1       0    #>  2 2016-02              0       2       0    #>  3 2016-03              0       3       0    #>  4 2016-04              0       5       0    #>  5 2016-05              1       5       0.2  #>  6 2016-06              0       4       0    #>  7 2016-07              0       3       0    #>  8 2016-08              2       4       0.5  #>  9 2016-09              0       4       0    #> 10 2016-10              1       4       0.25 #> 11 2016-11              0       3       0    #> 12 2016-12              0       3       0    #> 13 2017-01              0       0     NaN tibble(   month = iv_diff(seq(from = from, to = to, by = 1)),   n_disease = iv_count_includes(month, ddf$disease_date),   n_total = iv_count_overlaps(month, ddf$range, type = \"within\"),   prevalence = n_disease / n_total ) #> # A tibble: 12 × 4 #>                 month n_disease n_total prevalence #>      <iv<ymd<month>>>     <int>   <int>      <dbl> #>  1 [2016-01, 2016-02)         0       1       0    #>  2 [2016-02, 2016-03)         0       2       0    #>  3 [2016-03, 2016-04)         0       3       0    #>  4 [2016-04, 2016-05)         0       5       0    #>  5 [2016-05, 2016-06)         1       5       0.2  #>  6 [2016-06, 2016-07)         0       4       0    #>  7 [2016-07, 2016-08)         0       3       0    #>  8 [2016-08, 2016-09)         2       4       0.5  #>  9 [2016-09, 2016-10)         0       4       0    #> 10 [2016-10, 2016-11)         1       4       0.25 #> 11 [2016-11, 2016-12)         0       3       0    #> 12 [2016-12, 2017-01)         0       3       0"},{"path":"https://andrewallenbruce.github.io/forager/articles/patient-scheduling.html","id":"count-instances-of-value-within-overlapping-dates","dir":"Articles","previous_headings":"Interval Vectors in R with ivs","what":"Count instances of value within overlapping dates","title":"Patient Scheduling","text":"dataframe includes start_date end_date given unit_id along unit’s group. unit_id, need calculate proportion units pass within duration, start_date end_date current unit_id. Taking unit_id=1 example, need find units start_date /end_date within dates unit 1, .e. start_date = 2019-01-01 end_date = 2019-02-06. Given in_df, return two units, 1 2. One unit passes one fails proportion pass 0.5. desired_df shows output expect example. think ivs can help , think might looking iv_locate_overlaps() :","code":"data.frame(   unit_id = c(1, 2, 3),   start_date = as.Date(c(\"2019-01-01\", \"2019-02-05\", \"2020-01-12\")),   end_date = as.Date(c(\"2019-02-06\", \"2019-02-28\", \"2020-01-30\")),   group = c(\"pass\", \"fail\", \"pass\") ) #>   unit_id start_date   end_date group #> 1       1 2019-01-01 2019-02-06  pass #> 2       2 2019-02-05 2019-02-28  fail #> 3       3 2020-01-12 2020-01-30  pass data.frame(   unit_id = c(1, 2, 3),   start_date = as.Date(c(\"2019-01-01\", \"2019-02-05\", \"2020-01-12\")),   end_date = as.Date(c(\"2019-02-06\", \"2019-02-28\", \"2020-01-30\")),   group = c(\"pass\", \"fail\", \"pass\"),   pass_prop = c(0.5, 0.5, 1) ) #>   unit_id start_date   end_date group pass_prop #> 1       1 2019-01-01 2019-02-06  pass       0.5 #> 2       2 2019-02-05 2019-02-28  fail       0.5 #> 3       3 2020-01-12 2020-01-30  pass       1.0 # Starting with the more complex example with the 4th row in_df <- tibble(unit_id = c(1,2,3,4),                 start_date = as.Date(c(\"2019-01-01\",\"2019-02-05\",\"2020-01-12\",\"2019-02-20\")),                 end_date = as.Date(c(\"2019-02-06\",\"2019-02-28\",\"2020-01-30\",\"2020-01-30\")),                  group = c(\"pass\",\"fail\",\"pass\",\"pass\"))  in_df <- in_df |>   mutate(range = iv(start_date, end_date), .keep = \"unused\")  in_df #> # A tibble: 4 × 3 #>   unit_id group                    range #>     <dbl> <chr>               <iv<date>> #> 1       1 pass  [2019-01-01, 2019-02-06) #> 2       2 fail  [2019-02-05, 2019-02-28) #> 3       3 pass  [2020-01-12, 2020-01-30) #> 4       4 pass  [2019-02-20, 2020-01-30) # \"find all units that have `start_date` and/or `end_date` within the dates for unit i\" # So you are looking for \"any\" kind of overlap. # `iv_locate_overlaps()` does: \"For each `needle`, find every location in `haystack` # where that `needle` has ANY overlap at all\" locs <- iv_locate_overlaps(   needles = in_df$range,    haystack = in_df$range,    type = \"any\" )  # Note `needle` 1 overlaps `haystack` locations 1 and 2 (which is what you said # you want for unit 1) locs #>    needles haystack #> 1        1        1 #> 2        1        2 #> 3        2        1 #> 4        2        2 #> 5        2        4 #> 6        3        3 #> 7        3        4 #> 8        4        2 #> 9        4        3 #> 10       4        4 # Slice `in_df` appropriately, keeping relevant columns needed to answer the question needles <- in_df[locs$needles, c(\"unit_id\", \"range\")] haystack <- in_df[locs$haystack, c(\"group\", \"range\")] haystack <- rename(haystack, overlaps = range)  expanded_df <- bind_cols(needles, haystack) expanded_df #> # A tibble: 10 × 4 #>    unit_id                    range group                 overlaps #>      <dbl>               <iv<date>> <chr>               <iv<date>> #>  1       1 [2019-01-01, 2019-02-06) pass  [2019-01-01, 2019-02-06) #>  2       1 [2019-01-01, 2019-02-06) fail  [2019-02-05, 2019-02-28) #>  3       2 [2019-02-05, 2019-02-28) pass  [2019-01-01, 2019-02-06) #>  4       2 [2019-02-05, 2019-02-28) fail  [2019-02-05, 2019-02-28) #>  5       2 [2019-02-05, 2019-02-28) pass  [2019-02-20, 2020-01-30) #>  6       3 [2020-01-12, 2020-01-30) pass  [2020-01-12, 2020-01-30) #>  7       3 [2020-01-12, 2020-01-30) pass  [2019-02-20, 2020-01-30) #>  8       4 [2019-02-20, 2020-01-30) fail  [2019-02-05, 2019-02-28) #>  9       4 [2019-02-20, 2020-01-30) pass  [2020-01-12, 2020-01-30) #> 10       4 [2019-02-20, 2020-01-30) pass  [2019-02-20, 2020-01-30) # Compute the pass proportion per unit expanded_df |>   group_by(unit_id) |>   summarise(pass_prop = sum(group == \"pass\") / length(group)) #> # A tibble: 4 × 2 #>   unit_id pass_prop #>     <dbl>     <dbl> #> 1       1     0.5   #> 2       2     0.667 #> 3       3     1     #> 4       4     0.667"},{"path":"https://andrewallenbruce.github.io/forager/articles/testss.html","id":"aging-over-3-months","dir":"Articles","previous_headings":"","what":"Aging Over 3 Months","title":"Tests","text":"","code":"load_ex(\"old_azalea\") |>    select(-starts_with(\"bin\")) |>    mutate(rep_mon = factor(rep_mon, levels = month.abb, ordered = TRUE),          aging_bin = factor(aging_bin, levels = sort(unique(aging_bin)), ordered = TRUE)) |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) biweekly <- load_ex(\"aging_biweekly\") |>   mutate(year = get_year(date),           month = date_month_factor(date, abbreviate = TRUE),           .after = date) |>    arrange(date, aging_bin)  ggplot(data = biweekly,         aes(x = forcats::fct_rev(aging_bin), y = balance, fill = date)) +   geom_col(position = position_stack(reverse = TRUE)) +   # geom_col(position = position_fill(reverse = TRUE)) +   coord_flip(clip = \"off\") +   labs(title = NULL, x = NULL) +    ggthemes::scale_color_fivethirtyeight() +   ggthemes::theme_fivethirtyeight(base_size = 10) +   theme(legend.position = \"none\",         axis.text.x = element_blank(),         axis.text.y = element_text(size = 12, face = \"bold\")         ) agingex <- load_ex(\"aging_ex\")[1:4] |>    days_between(dos) |>    bin_aging(days_elapsed) |>   mutate(year = get_year(dos),           quarter = get_quarter(as_year_quarter_day(dos)),          month = date_month_factor(dos),           .after = dos)  agingex |>   gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"aging_facility\") |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"aging_monthly\") |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"cppm_ex\") |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"healthyr\") |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"monthly_raw\") |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"denials_extract\") |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"nm_examples\")$collections |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"nm_examples\")$em_visits |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"nm_examples\")$reimbursement |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"nm_examples\")$last_referral |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"patient_aging\") |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\")) load_ex(\"transaction_data\") |>    gt::gt_preview() |>    opt_table_font(font = google_font(name = \"Fira Code\"))"},{"path":"https://andrewallenbruce.github.io/forager/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/forager/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2024). forager: Healthcare Revenue Cycle Analysis Suite. R package version 0.0.1,  https://andrewallenbruce.github.io/forager/, https://github.com/andrewallenbruce/forager.","code":"@Manual{,   title = {forager: Healthcare Revenue Cycle Analysis Suite},   author = {Andrew Bruce},   year = {2024},   note = {R package version 0.0.1,  https://andrewallenbruce.github.io/forager/},   url = {https://github.com/andrewallenbruce/forager}, }"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"forager-","dir":"","previous_headings":"","what":"Healthcare Revenue Cycle Analysis Suite","title":"Healthcare Revenue Cycle Analysis Suite","text":"Forager (noun) person goes place place searching things can eat use.1 Ager (noun) person calls place place searching payment insurance can refuse.2","code":""},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Healthcare Revenue Cycle Analysis Suite","text":"can install development version forager GitHub :","code":"# install.packages(\"pak\") pak::pak(\"andrewallenbruce/forager\") library(tidyverse) library(clock) library(ymd) library(forager) library(fuimus)"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"the-lifecycle-of-a-claim","dir":"","previous_headings":"","what":"The Lifecycle of a Claim","title":"Healthcare Revenue Cycle Analysis Suite","text":"","code":"(x <- mock_claims(15000)) #> # A tibble: 15,000 × 10 #>    claimid payer     charges balance date_ser…¹ date_rel…² date_sub…³ date_acc…⁴ #>    <chr>   <fct>       <dbl>   <dbl> <date>     <date>     <date>     <date>     #>  1 00008   Oscar        115.    115. 2024-05-26 2024-06-04 2024-06-08 2024-06-14 #>  2 00343   American     284.      0  2024-05-26 2024-06-17 2024-06-19 2024-06-23 #>  3 00389   Wellcare     325.    325. 2024-05-26 2024-06-11 2024-06-19 2024-06-28 #>  4 00473   Medicaid      35.     35. 2024-05-26 2024-06-05 2024-06-08 2024-06-20 #>  5 00604   Humana        50.     50. 2024-05-26 2024-06-03 2024-06-10 2024-06-18 #>  6 01138   Omaha        107.      0  2024-05-26 2024-06-07 2024-06-08 2024-06-15 #>  7 01161   CVS Aetna     27.     27. 2024-05-26 2024-06-01 2024-06-03 2024-06-08 #>  8 01216   Lincoln …     73.     73. 2024-05-26 2024-05-26 2024-05-27 2024-06-07 #>  9 01262   Centene       97.      0  2024-05-26 2024-05-27 2024-05-29 2024-05-31 #> 10 01284   Medicaid      43.     43. 2024-05-26 2024-06-05 2024-06-10 2024-06-21 #> # ℹ 14,990 more rows #> # ℹ abbreviated names: ¹​date_service, ²​date_release, ³​date_submission, #> #   ⁴​date_acceptance #> # ℹ 2 more variables: date_adjudication <date>, date_reconciliation <date> (x <- prep_claims(x)) #> # A tibble: 15,000 × 13 #>    claimid payer         charges balance date_service aging_bin   dar days_rel…¹ #>    <chr>   <fct>           <dbl>   <dbl> <date>       <fct>     <dbl>      <dbl> #>  1 00001   Oscar            166.    166. 2024-05-17   0-30         11          0 #>  2 00002   Medicare          23.     23. 2024-04-03   0-30         20          2 #>  3 00003   UnitedHealth     212.    212. 2024-03-27   0-30         18          2 #>  4 00004   GuideWell         84.     84. 2024-05-13   31-60        34          6 #>  5 00005   Lincoln Nat'l    194.    194. 2024-04-03   0-30         29          5 #>  6 00006   HCSC              98.      0  2024-04-04   31-60        34          8 #>  7 00007   Mass Mutual       37.     37. 2024-05-13   31-60        37          7 #>  8 00008   Oscar            115.    115. 2024-05-26   31-60        37          9 #>  9 00009   BCBS MI          190.    190. 2024-04-06   31-60        42         10 #> 10 00010   CVS Aetna         57.     57. 2024-04-10   31-60        40          5 #> # ℹ 14,990 more rows #> # ℹ abbreviated name: ¹​days_release #> # ℹ 5 more variables: days_submission <dbl>, days_acceptance <dbl>, #> #   days_adjudication <dbl>, days_reconciliation <dbl>, dates <list> summarise_claims(x) |>    glimpse() #> Rows: 1 #> Columns: 9 #> $ n_claims            <int> 15000 #> $ gross_charges       <dbl> 1998810 #> $ ending_ar           <dbl> 1315266 #> $ mean_release        <dbl> 8.0004 #> $ mean_submission     <dbl> 3.01 #> $ mean_acceptance     <dbl> 7.518067 #> $ mean_adjudication   <dbl> 14.9988 #> $ mean_reconciliation <dbl> 2.23959 #> $ mean_dar            <dbl> 34.2838 x |>    group_by(     year = year(date_service),     month = month(date_service),     payer   ) |>   summarise_claims() |>    arrange(payer) |>   select(year, month, payer, n_claims, ending_ar, mean_dar) #> # A tibble: 81 × 6 #>     year month payer        n_claims ending_ar mean_dar #>    <int> <int> <fct>           <int>     <dbl>    <dbl> #>  1  2024     3 Oscar             195    18188.      34. #>  2  2024     4 Oscar             181    15630.      34. #>  3  2024     5 Oscar             148    14025.      34. #>  4  2024     3 Medicare          186    16966.      34. #>  5  2024     4 Medicare          208    17676.      34. #>  6  2024     5 Medicare          157    13925.      36. #>  7  2024     3 UnitedHealth      179    15377.      33. #>  8  2024     4 UnitedHealth      182    17476.      34. #>  9  2024     5 UnitedHealth      156    14550.      34. #> 10  2024     3 GuideWell         202    19187.      34. #> # ℹ 71 more rows x |>    group_by(     year = year(date_service),     qtr = quarter(date_service),     payer     ) |>   summarise_claims() |>    arrange(payer) |>   select(year, qtr, payer, n_claims, ending_ar, mean_dar) #> # A tibble: 54 × 6 #>     year   qtr payer         n_claims ending_ar mean_dar #>    <int> <int> <fct>            <int>     <dbl>    <dbl> #>  1  2024     1 Oscar              195    18188.      34. #>  2  2024     2 Oscar              329    29655.      34. #>  3  2024     1 Medicare           186    16966.      34. #>  4  2024     2 Medicare           365    31601.      35. #>  5  2024     1 UnitedHealth       179    15377.      33. #>  6  2024     2 UnitedHealth       338    32026.      34. #>  7  2024     1 GuideWell          202    19187.      34. #>  8  2024     2 GuideWell          356    31347.      35. #>  9  2024     1 Lincoln Nat'l      199    17432.      34. #> 10  2024     2 Lincoln Nat'l      392    36733.      34. #> # ℹ 44 more rows"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"days-in-ar-calculation","dir":"","previous_headings":"","what":"Days in AR Calculation","title":"Healthcare Revenue Cycle Analysis Suite","text":"Monthly  Quarterly","code":"tibble(   date = date_build(2024, 1:12),   gct  = rpois(12, 250000:400000),   earb = rpois(12, 290000:400000)   ) |>    avg_dar(     date,      gct,      earb,      dart = 35,     by = \"month\") #> # A tibble: 12 × 15 #>    date         gct  earb  ndip   adc  dart   dar dar_pass ratio_id…¹ ratio_ac…² #>    <date>     <int> <int> <int> <dbl> <dbl> <dbl> <lgl>         <dbl>      <dbl> #>  1 2024-01-01 2.5e5 2.9e5    31 8080.    35   36. FALSE           1.1        1.2 #>  2 2024-02-01 2.5e5 2.9e5    29 8624.    35   34. TRUE            1.2        1.2 #>  3 2024-03-01 2.5e5 2.9e5    31 8062.    35   36. FALSE           1.1        1.2 #>  4 2024-04-01 2.5e5 2.9e5    30 8320.    35   35. TRUE            1.2        1.2 #>  5 2024-05-01 2.5e5 2.9e5    31 8026.    35   36. FALSE           1.1        1.2 #>  6 2024-06-01 2.5e5 2.9e5    30 8310.    35   35. TRUE            1.2        1.2 #>  7 2024-07-01 2.5e5 2.9e5    31 8053.    35   36. FALSE           1.1        1.2 #>  8 2024-08-01 2.5e5 2.9e5    31 8041.    35   36. FALSE           1.1        1.2 #>  9 2024-09-01 2.5e5 2.9e5    30 8324.    35   35. TRUE            1.2        1.2 #> 10 2024-10-01 2.5e5 2.9e5    31 8084.    35   36. FALSE           1.1        1.2 #> 11 2024-11-01 2.5e5 2.9e5    30 8353.    35   35. TRUE            1.2        1.2 #> 12 2024-12-01 2.5e5 2.9e5    31 8040.    35   36. FALSE           1.1        1.2 #> # ℹ abbreviated names: ¹​ratio_ideal, ²​ratio_actual #> # ℹ 5 more variables: ratio_diff <dbl>, earb_target <dbl>, earb_diff <dbl>, #> #   gct_pct <dbl>, earb_pct <dbl> tibble(   date = date_build(2024, 1:12),   gct  = rpois(12, 250000:400000),   earb = rpois(12, 285500:400000)   ) |>    avg_dar(     date,      gct,      earb,      dart = 35,     by = \"quarter\") #> # A tibble: 4 × 15 #>   date         earb   gct  ndip   adc  dart   dar dar_pass ratio_id…¹ ratio_ac…² #>   <date>      <int> <int> <int> <dbl> <dbl> <dbl> <lgl>         <dbl>      <dbl> #> 1 2024-03-01 285562 7.5e5    91 8249.    35   35. TRUE           0.38       0.38 #> 2 2024-06-01 285591 7.5e5    91 8253.    35   35. TRUE           0.38       0.38 #> 3 2024-09-01 285469 7.5e5    92 8149.    35   35. FALSE          0.38       0.38 #> 4 2024-12-01 285639 7.5e5    92 8131.    35   35. FALSE          0.38       0.38 #> # ℹ abbreviated names: ¹​ratio_ideal, ²​ratio_actual #> # ℹ 5 more variables: ratio_diff <dbl>, earb_target <dbl>, earb_diff <dbl>, #> #   gct_pct <dbl>, earb_pct <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Healthcare Revenue Cycle Analysis Suite","text":"Please note forager project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Average Days in AR — avg_dar","title":"Calculate Average Days in AR — avg_dar","text":"Calculate Average Days AR","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Average Days in AR — avg_dar","text":"","code":"avg_dar(df, date, gct, earb, dart = 35, by = c(\"month\", \"quarter\"))"},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Average Days in AR — avg_dar","text":"df <data.frame> <tibble> date column <date>s gct <dbl> column total Gross Charges earb <dbl> column ending accounts receivable balances dart [numeric] Target Days AR, default 35 days [character] string specifying calculation period; one \"month\", \"quarter\", \"year\"; defaults \"month\"","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Average Days in AR — avg_dar","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/avg_dar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Average Days in AR — avg_dar","text":"","code":"avg_dar(df     = dar_ex(),         date   = date,         gct    = gross_charges,         earb   = ending_ar,         dart   = 35,         by = \"month\") #> # A tibble: 12 × 15 #>    date         gct  earb  ndip   adc  dart   dar dar_pass ratio_id…¹ ratio_ac…² #>    <date>     <dbl> <dbl> <int> <dbl> <dbl> <dbl> <lgl>         <dbl>      <dbl> #>  1 2024-01-01 3.3e5 2.9e5    31 1.1e4    35   27. TRUE            1.1       0.88 #>  2 2024-02-01 3.0e5 3.1e5    29 1.0e4    35   30. TRUE            1.2       1.0  #>  3 2024-03-01 2.0e5 2.5e5    31 6.4e3    35   40. FALSE           1.1       1.3  #>  4 2024-04-01 1.9e5 1.8e5    30 6.2e3    35   30. TRUE            1.2       0.99 #>  5 2024-05-01 1.2e5 2.0e5    31 4.0e3    35   51. FALSE           1.1       1.7  #>  6 2024-06-01 1.3e5 2.0e5    30 4.4e3    35   46. FALSE           1.2       1.5  #>  7 2024-07-01 1.5e5 1.8e5    31 5.0e3    35   37. FALSE           1.1       1.2  #>  8 2024-08-01 1.6e5 1.7e5    31 5.1e3    35   33. TRUE            1.1       1.1  #>  9 2024-09-01 1.5e5 1.8e5    30 4.9e3    35   37. FALSE           1.2       1.2  #> 10 2024-10-01 1.6e5 1.8e5    31 5.3e3    35   34. TRUE            1.1       1.1  #> 11 2024-11-01 1.5e5 1.6e5    30 5.0e3    35   32. TRUE            1.2       1.1  #> 12 2024-12-01 1.7e5 2.0e5    31 5.5e3    35   37. FALSE           1.1       1.2  #> # ℹ abbreviated names: ¹​ratio_ideal, ²​ratio_actual #> # ℹ 5 more variables: ratio_diff <dbl>, earb_target <dbl>, earb_diff <dbl>, #> #   gct_pct <dbl>, earb_pct <dbl>  avg_dar(df     = dar_ex(),         date   = date,         gct    = gross_charges,         earb   = ending_ar,         dart   = 35,         by = \"quarter\") #> # A tibble: 4 × 15 #>   date         earb   gct  ndip   adc  dart   dar dar_pass ratio_id…¹ ratio_ac…² #>   <date>      <dbl> <dbl> <int> <dbl> <dbl> <dbl> <lgl>         <dbl>      <dbl> #> 1 2024-03-01  2.5e5 8.2e5    91 9037.    35   28. TRUE           0.38       0.31 #> 2 2024-06-01  2.0e5 4.4e5    91 4848.    35   42. FALSE          0.38       0.46 #> 3 2024-09-01  1.8e5 4.6e5    92 4977.    35   36. FALSE          0.38       0.39 #> 4 2024-12-01  2.0e5 4.8e5    92 5264.    35   38. FALSE          0.38       0.41 #> # ℹ abbreviated names: ¹​ratio_ideal, ²​ratio_actual #> # ℹ 5 more variables: ratio_diff <dbl>, earb_target <dbl>, earb_diff <dbl>, #> #   gct_pct <dbl>, earb_pct <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply 30-Day Aging Bins — bin_aging","title":"Apply 30-Day Aging Bins — bin_aging","text":"Apply 30-Day Aging Bins","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply 30-Day Aging Bins — bin_aging","text":"","code":"bin_aging(df, ndays, bin_type = c(\"case\", \"chop\"))"},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply 30-Day Aging Bins — bin_aging","text":"df <data.frame> <tibble> ndays <dbl> column counts days elapsed bin bin_type <chr> string specifying bin type; one \"chop\", \"cut\" \"ivs\"","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply 30-Day Aging Bins — bin_aging","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/bin_aging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply 30-Day Aging Bins — bin_aging","text":"","code":"mock_claims(100) |>   dplyr::mutate(     dar = dplyr::if_else(       !is.na(date_reconciliation),       as.numeric((date_reconciliation - date_service)),       as.numeric((date_adjudication - date_service))     )   ) |>     bin_aging(dar, \"chop\") |>     dplyr::summarise(       n_claims = dplyr::n(),       balance = sum(balance, na.rm = TRUE),       .by = c(aging_bin)) #> # A tibble: 2 × 3 #>   aging_bin n_claims balance #>   <fct>        <int>   <dbl> #> 1 (30, 60]        61   5861. #> 2 (0, 30]         39   2813.  mock_claims(10)[c(   \"date_service\",   \"charges\",   \"payer\")] |>   days_between(date_service) |>   bin_aging(days_elapsed) #> # A tibble: 10 × 5 #>    date_service charges payer             days_elapsed aging_bin #>    <date>         <dbl> <fct>                    <int> <fct>     #>  1 2024-05-13      189. Allianz                     29 0-30      #>  2 2024-05-12      119. Mass Mutual                 30 0-30      #>  3 2024-05-02      145. Mass Mutual                 40 31-60     #>  4 2024-04-28      141. GuideWell                   44 31-60     #>  5 2024-04-28       31. UnitedHealth                44 31-60     #>  6 2024-04-15       14. Allianz                     57 31-60     #>  7 2024-04-02      225. Medicare                    70 61-90     #>  8 2024-04-01       16. Elevance (Anthem)           71 61-90     #>  9 2024-03-10      186. BCBS MI                     93 91-120    #> 10 2024-03-09       59. HCSC                        94 91-120     load_ex(\"aging_ex\") |>   dplyr::select(dos, charges, ins_name) |>   days_between(dos) |>   bin_aging(days_elapsed) |>   dplyr::arrange(aging_bin) |>   dplyr::group_by(     year = clock::get_year(dos),     month = clock::date_month_factor(dos),   ) |>   janitor::tabyl(ins_name, aging_bin, year) #> $`2023` #>    ins_name 31-60 61-90 91-120 121+ #>       AETNA     0     0      0    6 #>  Blue Cross     0     0      0   13 #>       CIGNA     0     0      0    6 #>    Coventry     0     0      0    0 #>    Medicare     0     0      0    9 #>     Patient     0     0      0   24 #>  #> $`2024` #>    ins_name 31-60 61-90 91-120 121+ #>       AETNA    93    41     52   62 #>  Blue Cross   247    70     88  117 #>       CIGNA   130    41     44   58 #>    Coventry    14     4      7    5 #>    Medicare   218    69     84  117 #>     Patient   456   156    171  216 #>"},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Days in AR Example Data — dar_ex","title":"Days in AR Example Data — dar_ex","text":"Days AR Example Data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/dar_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Days in AR Example Data — dar_ex","text":"","code":"dar_ex()"},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Number of Days Between Two Dates — days_between","title":"Calculate Number of Days Between Two Dates — days_between","text":"Calculate Number Days Two Dates","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Number of Days Between Two Dates — days_between","text":"","code":"days_between(df, from, to = NULL)"},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Number of Days Between Two Dates — days_between","text":"df <data.frame> <tibble> [character] column start dates [character] column end dates","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Number of Days Between Two Dates — days_between","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/days_between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Number of Days Between Two Dates — days_between","text":"","code":"mock_claims(10)[c(   \"date_service\",   \"charges\",   \"payer\")] |>   days_between(date_service) #> # A tibble: 10 × 4 #>    date_service charges payer             days_elapsed #>    <date>         <dbl> <fct>                    <int> #>  1 2024-05-21      311. Omaha                       21 #>  2 2024-05-19       45. American                    23 #>  3 2024-05-18       67. Equitable                   24 #>  4 2024-05-18      369. Allianz                     24 #>  5 2024-04-27       60. HCSC                        45 #>  6 2024-04-21      221. Molina                      51 #>  7 2024-04-09       49. Equitable                   63 #>  8 2024-04-09       17. BCBS MI                     63 #>  9 2024-03-22      122. Kaiser Permanente           81 #> 10 2024-03-09      149. American                    94"},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Load example data — load_ex","title":"Load example data — load_ex","text":"Load example data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load example data — load_ex","text":"","code":"load_ex(name)"},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load example data — load_ex","text":"name [character] name example dataset","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/load_ex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load example data — load_ex","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mean_na.html","id":null,"dir":"Reference","previous_headings":"","what":"mean() with NA removal — mean_na","title":"mean() with NA removal — mean_na","text":"mean() NA removal","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mean_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mean() with NA removal — mean_na","text":"","code":"mean_na(x)"},{"path":"https://andrewallenbruce.github.io/forager/reference/mean_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mean() with NA removal — mean_na","text":"x numeric vector","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_claims.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mock coding/billing data frame — mock_claims","title":"Generate mock coding/billing data frame — mock_claims","text":"Generate mock coding/billing data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_claims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mock coding/billing data frame — mock_claims","text":"","code":"mock_claims(rows = 100, payers = payer_names(), count_days = FALSE, ...)"},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_claims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mock coding/billing data frame — mock_claims","text":"rows [integerish] rows number rows generate; default 100 payers [character] vector payer names; default payer_names() count_days [logical] add columns days events; default FALSE ... [dots] additional arguments","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_claims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate mock coding/billing data frame — mock_claims","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_claims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate mock coding/billing data frame — mock_claims","text":"","code":"mock_claims(rows = 5) #> # A tibble: 5 × 10 #>   claimid payer     charges balance date_serv…¹ date_rel…² date_sub…³ date_acc…⁴ #>   <chr>   <fct>       <dbl>   <dbl> <date>      <date>     <date>     <date>     #> 1 5       American      78.     78. 2024-05-27  2024-05-28 2024-05-30 2024-06-12 #> 2 2       CVS Aetna    148.    148. 2024-05-25  2024-05-26 2024-05-28 2024-06-05 #> 3 1       Allianz      275.      0  2024-05-03  2024-05-03 2024-05-03 2024-05-06 #> 4 3       BCBS WY       76.      0  2024-03-31  2024-04-02 2024-04-05 2024-04-12 #> 5 4       Humana       154.      0  2024-03-27  2024-03-28 2024-03-30 2024-04-07 #> # ℹ abbreviated names: ¹​date_service, ²​date_release, ³​date_submission, #> #   ⁴​date_acceptance #> # ℹ 2 more variables: date_adjudication <date>, date_reconciliation <date>"},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_parbx.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Mock PARBx data — mock_parbx","title":"Generate Mock PARBx data — mock_parbx","text":"Generate Mock PARBx data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_parbx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Mock PARBx data — mock_parbx","text":"","code":"mock_parbx(payers = payer_names(), ...)"},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_parbx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Mock PARBx data — mock_parbx","text":"payers [character] vector payer names ... [dots] additional arguments","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_parbx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Mock PARBx data — mock_parbx","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/mock_parbx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Mock PARBx data — mock_parbx","text":"","code":"# Every payer name generates 60 rows of data mock_parbx() #> # A tibble: 1,620 × 5 #>    date       month    payer    aging_bin aging_prop #>    <date>     <ord>    <chr>    <ord>          <dbl> #>  1 2024-01-01 January  Medicare 0-30           0.15  #>  2 2024-01-01 January  Medicare 31-60          0.28  #>  3 2024-01-01 January  Medicare 61-90          0.33  #>  4 2024-01-01 January  Medicare 91-120         0.11  #>  5 2024-01-01 January  Medicare 121+           0.13  #>  6 2024-02-01 February Medicare 0-30           0.22  #>  7 2024-02-01 February Medicare 31-60          0.10  #>  8 2024-02-01 February Medicare 61-90          0.016 #>  9 2024-02-01 February Medicare 91-120         0.33  #> 10 2024-02-01 February Medicare 121+           0.33  #> # ℹ 1,610 more rows"},{"path":"https://andrewallenbruce.github.io/forager/reference/net_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Net Prediction Example Data — net_ex","title":"Net Prediction Example Data — net_ex","text":"Net Prediction Example Data","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/net_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Net Prediction Example Data — net_ex","text":"","code":"net_ex()"},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Lirov's Net Payment Estimation — predict_net","title":"Lirov's Net Payment Estimation — predict_net","text":"Lirov's Net Payment Estimation","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lirov's Net Payment Estimation — predict_net","text":"","code":"predict_net(df, date, gct, earb, net, parb_120)"},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lirov's Net Payment Estimation — predict_net","text":"df <data.frame> <tibble> date column <date>s gct <dbl> column total Gross Charges earb <dbl> column ending accounts receivable balances net column net payments parb_120 column percentage AR beyond 120 days old","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lirov's Net Payment Estimation — predict_net","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/predict_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lirov's Net Payment Estimation — predict_net","text":"","code":"predict_net(   net_ex(),   date,   gct,   earb,   net,   parb_120) #> # A tibble: 13 × 11 #>    date           gct    earb earb_lt120 earb_gt120 parl_120 parb_120 pct_paid #>    <date>       <dbl>   <dbl>      <dbl>      <dbl>    <dbl>    <dbl>    <dbl> #>  1 2024-01-01 325982  288433.    282375.      6057.    0.979    0.021    0.320 #>  2 2024-02-01 297732. 307871.    293401.     14470.    0.953    0.047    0.418 #>  3 2024-03-01 198655. 253977.    234928.     19048.    0.925    0.075    0.601 #>  4 2024-04-01 186047  183685.    179828.      3857.    0.979    0.021    0.386 #>  5 2024-05-01 123654  204228.    194629.      9599.    0.953    0.047    0.405 #>  6 2024-06-01 131440. 203460.    188201.     15260.    0.925    0.075    0.500 #>  7 2024-07-01 153991  182771.    178933.      3838.    0.979    0.021    0.554 #>  8 2024-08-01 156975  169634.    161661.      7973.    0.953    0.047    0.434 #>  9 2024-09-01 146878. 179348.    165897.     13451.    0.925    0.075    0.502 #> 10 2024-10-01 163799. 178051.    174312.      3739.    0.979    0.021    0.497 #> 11 2024-11-01 151411. 162757.    155108.      7650.    0.953    0.047    0.518 #> 12 2024-12-01 169094. 199849.    184861.     14989.    0.925    0.075    0.408 #> 13 2025-01-01     NA      NA         NA         NA    NA       NA       NA     #> # ℹ 3 more variables: net <dbl>, net_pred <dbl>, net_diff <dbl>"},{"path":"https://andrewallenbruce.github.io/forager/reference/prep_claims.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep mock coding/billing data frame — prep_claims","title":"Prep mock coding/billing data frame — prep_claims","text":"Prep mock coding/billing data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/prep_claims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep mock coding/billing data frame — prep_claims","text":"","code":"prep_claims(df, ...)"},{"path":"https://andrewallenbruce.github.io/forager/reference/prep_claims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep mock coding/billing data frame — prep_claims","text":"df [data.frame] data frame generated mock_claims() ... [dots] additional arguments","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/prep_claims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep mock coding/billing data frame — prep_claims","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/prep_claims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep mock coding/billing data frame — prep_claims","text":"","code":"prep_claims(mock_claims(rows = 5)) #> # A tibble: 5 × 13 #>   claimid payer charges balance date_ser…¹ aging_bin   dar days_rel…² days_sub…³ #>   <chr>   <fct>   <dbl>   <dbl> <date>     <fct>     <dbl>      <dbl>      <dbl> #> 1 1       Well…    167.    167. 2024-04-17 0-30         18          0          3 #> 2 2       Mass…     96.     96. 2024-04-09 0-30         17          1          0 #> 3 3       Medi…     77.     77. 2024-04-26 31-60        31          3          5 #> 4 4       Cigna     97.      0  2024-05-20 31-60        33          5          5 #> 5 5       New …    119.      0  2024-05-13 31-60        44          8          4 #> # ℹ abbreviated names: ¹​date_service, ²​days_release, ³​days_submission #> # ℹ 4 more variables: days_acceptance <dbl>, days_adjudication <dbl>, #> #   days_reconciliation <dbl>, dates <list>"},{"path":"https://andrewallenbruce.github.io/forager/reference/remove_quiet.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty rows and columns — remove_quiet","title":"Remove empty rows and columns — remove_quiet","text":"Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/remove_quiet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty rows and columns — remove_quiet","text":"","code":"remove_quiet(df)"},{"path":"https://andrewallenbruce.github.io/forager/reference/remove_quiet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty rows and columns — remove_quiet","text":"df data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/sorted_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorted Bar Chart — sorted_bars","title":"Sorted Bar Chart — sorted_bars","text":"Sorted Bar Chart","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/sorted_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorted Bar Chart — sorted_bars","text":"","code":"sorted_bars(df, var)"},{"path":"https://andrewallenbruce.github.io/forager/reference/sorted_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorted Bar Chart — sorted_bars","text":"df data frame var column plot","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/sorted_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorted Bar Chart — sorted_bars","text":"ggplot2 object","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/sum_na.html","id":null,"dir":"Reference","previous_headings":"","what":"sum() with NA removal — sum_na","title":"sum() with NA removal — sum_na","text":"sum() NA removal","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/sum_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sum() with NA removal — sum_na","text":"","code":"sum_na(x)"},{"path":"https://andrewallenbruce.github.io/forager/reference/sum_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sum() with NA removal — sum_na","text":"x numeric vector","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/summarise_claims.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise mock coding/billing data frame — summarise_claims","title":"Summarise mock coding/billing data frame — summarise_claims","text":"Summarise mock coding/billing data frame","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/summarise_claims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise mock coding/billing data frame — summarise_claims","text":"","code":"summarise_claims(df, vars = c(dplyr::starts_with(\"days_\"), dar))"},{"path":"https://andrewallenbruce.github.io/forager/reference/summarise_claims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise mock coding/billing data frame — summarise_claims","text":"df [data.frame] data frame generated mock_claims() |> prep_claims() vars [character] variables summarise, e.g. c(days_service, days_reconciliation)","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/summarise_claims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise mock coding/billing data frame — summarise_claims","text":"tibble","code":""},{"path":"https://andrewallenbruce.github.io/forager/reference/summarise_claims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise mock coding/billing data frame — summarise_claims","text":"","code":"x <- mock_claims(rows = 500) |> prep_claims()  summarise_claims(x) #> # A tibble: 1 × 9 #>   n_claims gross_charges ending_ar mean_release mean_sub…¹ mean_acc…² mean_adj…³ #>      <int>         <dbl>     <dbl>        <dbl>      <dbl>      <dbl>      <dbl> #> 1      500        64752.    43413.          8.1        2.9        7.6        15. #> # ℹ abbreviated names: ¹​mean_submission, ²​mean_acceptance, ³​mean_adjudication #> # ℹ 2 more variables: mean_reconciliation <dbl>, mean_dar <dbl>  x |>   dplyr::group_by(     year = ymd::year(date_service),     month = ymd::month(date_service)) |>   summarise_claims() #> # A tibble: 3 × 11 #>    year month n_claims gross_charges ending_ar mean_rele…¹ mean_sub…² mean_acc…³ #>   <int> <int>    <int>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl> #> 1  2024     3      157        20003.    12755.         8.0        2.8        7.7 #> 2  2024     4      158        20185.    12881.         8.5        3.1        7.4 #> 3  2024     5      185        24564.    17776.         7.8        3          7.7 #> # ℹ abbreviated names: ¹​mean_release, ²​mean_submission, ³​mean_acceptance #> # ℹ 3 more variables: mean_adjudication <dbl>, mean_reconciliation <dbl>, #> #   mean_dar <dbl>"},{"path":[]},{"path":"https://andrewallenbruce.github.io/forager/news/index.html","id":"forager-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"forager 0.0.0.9001 (2022-08-31)","title":"forager 0.0.0.9001 (2022-08-31)","text":"Added gt table examples","code":""}]
